Index: application/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># IF YOU'RE HERE: New routes go in Controllers > admin or consumer!\n\nfrom flask import Flask, render_template, request, redirect, url_for\nfrom application.Forms import CreateUserForm, CreateCustomerForm\nimport shelve\nfrom application.Models.User import User\nfrom application.Models.Customer import Customer\nimport atexit\n# Includes\nfrom application.Controllers.admin import *\nfrom application.Controllers.consumer import *\n\n\napp = Flask(__name__)\napp.secret_key = \"doofypulseEngineers\"  # used for stuff e.g. Flask sessions\n\n# The name of our db file. Syntax: with shelve.open(DB_NAME, 'c') as db:\nDB_NAME = \"foodypulse\"\n\n# CONSTANTS USED BY OUR PAGES\n# For stuff like colour schemes.\n# Todo\n\n# todo: add a proper logging system\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    format=\"%(asctime)s [%(levelname)s] %(message)s\",\n                    handlers=[\n                        logging.FileHandler(\"fp-log.txt\"),\n                        logging.StreamHandler()\n                    ])\nlogging.info(\"Logger configured!\")\n\n\n# after the app quits, we save all databases -ashlee\ndef exit_handler():\n    logging.info(\"Exit Handler: Stopping Flask! Saving db...\")\n    save_db()\n\n\natexit.register(exit_handler)\n\n\n# ALL BELOW are for the Practical LLS.\n# Please add new routes to Controllers. -ash\n\n\n@app.route('/contactus')\ndef contact_us():\n    # render a template\n    return render_template('contactUs.html')\n\n\n@app.route('/createUser', methods=['GET', 'POST'])\ndef create_user():\n    create_user_form = CreateUserForm(request.form)\n    if request.method == 'POST' and create_user_form.validate():\n        users_dict = {}\n        with shelve.open('user.db', 'c') as db:\n\n            try:\n                if 'Users' in db:\n                    users_dict = db['Users']\n                else:\n                    db['Users'] = users_dict\n            except:\n                print(\"Error in retrieving Users from user.db.\")\n\n            user = User(create_user_form.first_name.data,\n                        create_user_form.last_name.data,\n                        create_user_form.gender.data,\n                        create_user_form.membership.data,\n                        create_user_form.remarks.data)\n            users_dict[user.get_user_id()] = user\n            db['Users'] = users_dict\n            db[\"count\"] = User.count_id  # VERY IMPORTANT - Save count ID back\n\n            # Test codes\n            # users_dict = db['Users']\n            # user = users_dict[user.get_user_id()]\n            # print(user.get_first_name(), user.get_last_name(), \"was stored\n            # in user.db successfully with user_id ==\",\n            #       user.get_user_id())\n\n        return redirect(url_for('retrieve_users'))\n    return render_template('createUser.html', form=create_user_form)\n\n\n@app.route('/createCustomer', methods=['GET', 'POST'])\ndef create_customer():\n    create_customer_form = CreateCustomerForm(request.form)\n    if request.method == 'POST' and create_customer_form.validate():\n        customers_dict = {}\n        with shelve.open('customer.db', 'c') as db:\n\n            try:\n                customers_dict = db['Customers']\n            except:\n                print(\"Error in retrieving Customers from customer.db.\")\n\n            customer = Customer(create_customer_form.first_name.data,\n                                create_customer_form.last_name.data,\n                                create_customer_form.gender.data,\n                                create_customer_form.membership.data,\n                                create_customer_form.remarks.data,\n                                create_customer_form.email.data,\n                                create_customer_form.date_joined.data,\n                                create_customer_form.address.data, )\n            customers_dict[customer.get_customer_id()] = customer\n            db['Customers'] = customers_dict\n            db[\"count\"] = Customer.count_id\n\n        return redirect(url_for('home'))\n    return render_template('createCustomer.html', form=create_customer_form)\n\n\n@app.route('/retrieveUsers')\ndef retrieve_users():\n    users_dict = {}\n    with shelve.open('user.db', 'c') as db:\n        if \"Users\" in db:\n            users_dict = db['Users']\n        else:\n            db['Users'] = users_dict\n\n    users_list = []\n    for key in users_dict:\n        user = users_dict.get(key)\n        users_list.append(user)\n\n    return render_template('retrieveUsers.html', count=len(users_list),\n                           users_list=users_list)\n\n\n@app.route('/retrieveCustomers')\ndef retrieve_customers():\n    customers_dict = {}\n    with shelve.open('customer.db', 'c') as db:\n        if \"Customers\" in db:\n            customers_dict = db['Customers']\n        else:\n            db['Customers'] = customers_dict\n\n    customers_list = []\n    for key in customers_dict:\n        customer = customers_dict.get(key)\n        customers_list.append(customer)\n\n    return render_template('retrieveCustomers.html',\n                           count=len(customers_list),\n                           customers_list=customers_list)\n\n\n@app.route('/updateUser/<int:id>/', methods=['GET', 'POST'])\ndef update_user(id):\n    update_user_form = CreateUserForm(request.form)\n    if request.method == 'POST' and update_user_form.validate():\n        # TODO: Perform checks for access rights or unique values\n        users_dict = {}\n        try:\n            with  shelve.open('user.db', 'w') as db:\n                users_dict = db['Users']\n\n                user = users_dict.get(id)\n                user.set_first_name(update_user_form.first_name.data)\n                user.set_last_name(update_user_form.last_name.data)\n                user.set_gender(update_user_form.gender.data)\n                user.set_membership(update_user_form.membership.data)\n                user.set_remarks(update_user_form.remarks.data)\n                db['Users'] = users_dict\n        except:\n            print('An error have occurred in Update User POST')\n\n        return redirect(url_for('retrieve_users'))\n    else:\n        # TODO: perform checks for access rights here\n        users_dict = {}\n        try:\n            with shelve.open('user.db', 'r') as db:\n                users_dict = db['Users']\n        except:\n            print('An error have occurred in Update User GET')\n\n        user = users_dict.get(id)\n        update_user_form.first_name.data = user.get_first_name()\n        update_user_form.last_name.data = user.get_last_name()\n        update_user_form.gender.data = user.get_gender()\n        update_user_form.membership.data = user.get_membership()\n        update_user_form.remarks.data = user.get_remarks()\n\n        return render_template('updateUser.html', form=update_user_form)\n\n\n@app.route('/updateCustomer/<int:id>/', methods=['GET', 'POST'])\ndef update_customer(id):\n    update_customer_form = CreateCustomerForm(request.form)\n    if request.method == 'POST' and update_customer_form.validate():\n        # TODO: Perform checks for access rights or unique values\n        customers_dict = {}\n        try:\n            with shelve.open('customer.db', 'w') as db:\n                customers_dict = db['Customers']\n\n                customer = customers_dict.get(id)\n                customer.set_first_name(update_customer_form.first_name.data)\n                customer.set_last_name(update_customer_form.last_name.data)\n                customer.set_gender(update_customer_form.gender.data)\n                customer.set_membership(update_customer_form.membership.data)\n                customer.set_remarks(update_customer_form.remarks.data)\n\n                customer.set_date_joined(update_customer_form.date_joined.data)\n                customer.set_email(update_customer_form.email.data)\n                customer.set_address(update_customer_form.address.data)\n\n                db['Customers'] = customers_dict\n        except:\n            print(f'An error have occured in update customer POST')\n\n        return redirect(url_for('retrieve_customers'))\n    else:\n        # TODO: perform checks for access rights here\n        customers_dict = {}\n        try:\n            with shelve.open('customer.db', 'r') as db:\n                customers_dict = db['Customers']\n        except:\n            print('An error have occurred in update customer GET')\n\n        customer = customers_dict.get(id)\n        update_customer_form.first_name.data = customer.get_first_name()\n        update_customer_form.last_name.data = customer.get_last_name()\n        update_customer_form.gender.data = customer.get_gender()\n        update_customer_form.membership.data = customer.get_membership()\n        update_customer_form.remarks.data = customer.get_remarks()\n\n        update_customer_form.email.data = customer.get_email()\n        update_customer_form.date_joined.data = customer.get_date_joined()\n        update_customer_form.address.data = customer.get_address()\n\n        return render_template('updateCustomer.html', form=update_customer_form)\n\n\n@app.route('/deleteUser/<int:id>', methods=['POST'])\ndef delete_user(id):\n    try:\n        with shelve.open('user.db', 'w') as db:\n            users_dict = db['Users']\n            if id in users_dict:\n                users_dict.pop(id)\n            db['Users'] = users_dict\n    except Exception as e:\n        print(f'An Error have occurred in delete_user({id}) - {e}')\n\n    return redirect(url_for('retrieve_users'))\n\n\n@app.route('/deleteCustomer/<int:id>', methods=['POST'])\ndef delete_customer(id):\n    try:\n        with shelve.open('customer.db', 'w') as db:\n            customers_dict = db['Customers']\n            if id in customers_dict:\n                customers_dict.pop(id)\n            db['Customers'] = customers_dict\n    except Exception as e:\n        print(f'An Error have occurred in delete_customer({id}) - {e}')\n\n    return redirect(url_for('retrieve_customers'))\n\n\n# Run before doing anything else; a la main() -ash\n# with app.app_context():\n#     # # Get current customer and admin ID count to prevent overriding\n#     # with shelve.open(\"customer.db\", 'c') as db:\n#     #     if \"count\" in db:\n#     #         print(\"Found customer count in db: %d\" % db[\"count\"])\n#     #         Customer.count_id = db[\"count\"]\n#     #     else:\n#     #         print(\"Initializing customer count in db\")\n#     #         db[\"count\"] = Customer.count_id  # initialize it:\n#     #\n#     # with shelve.open(\"user.db\", 'c') as db:\n#     #     if \"count\" in db:\n#     #         print(\"Found user count in db: %d\" % db[\"count\"])\n#     #         User.count_id = db[\"count\"]\n#     #     else:\n#     #         print(\"Initializing user count in db\")\n#     #         db[\"count\"] = User.count_id  # initialize it:\n#     load_db()  # load and cache db before app runs\n#     app.run()\n\nif __name__ == '__main__':\n    load_db()  # load and cache db before app runs\n    app.run()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/__init__.py b/application/__init__.py
--- a/application/__init__.py	(revision 2a59eae653aed8e04932b954ef0028204cff11cf)
+++ b/application/__init__.py	(date 1641367483213)
@@ -1,6 +1,13 @@
 # IF YOU'RE HERE: New routes go in Controllers > admin or consumer!
 
 from flask import Flask, render_template, request, redirect, url_for
+
+app = Flask(__name__)
+app.secret_key = "doofypulseEngineers"  # used for stuff e.g. Flask sessions
+
+# The name of our db file. Syntax: with shelve.open(DB_NAME, 'c') as db:
+DB_NAME = "foodypulse"
+
 from application.Forms import CreateUserForm, CreateCustomerForm
 import shelve
 from application.Models.User import User
@@ -11,11 +18,6 @@
 from application.Controllers.consumer import *
 
 
-app = Flask(__name__)
-app.secret_key = "doofypulseEngineers"  # used for stuff e.g. Flask sessions
-
-# The name of our db file. Syntax: with shelve.open(DB_NAME, 'c') as db:
-DB_NAME = "foodypulse"
 
 # CONSTANTS USED BY OUR PAGES
 # For stuff like colour schemes.
