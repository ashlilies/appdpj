Index: application/Controllers/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Controller for the Admin side of things.\r\n# Do NOT run directly. Run main.py in the appdpj/src/ directory instead.\r\n\r\n# New routes go here, not in __init__.\r\nimport datetime\r\nimport traceback\r\n\r\nimport flask\r\nfrom flask import render_template, request, redirect, url_for, session, flash, Flask\r\nfrom flask_login import logout_user\r\n\r\nfrom application.CouponForms import CreateCouponForm\r\nfrom application.Models.Admin import *\r\nfrom application.Models.CouponSystem import CouponSystem\r\nfrom application.Models.Certification import Certification\r\nfrom application.Models.Food import Food\r\nfrom application.Models.Restaurant import Restaurant\r\nfrom application import app, DB_NAME, login_manager\r\nfrom application.Models.Transaction import Transaction\r\nfrom application.adminAddFoodForm import CreateFoodForm\r\nfrom werkzeug.utils import secure_filename\r\nfrom application.Controllers.restaurant_controller import *\r\n# from application.restaurantCertification import DocumentUploadForm\r\nimport shelve, os\r\nimport uuid\r\nfrom application.rest_details_form import *\r\n\r\n# Ruri's imported libraries\r\nimport urllib.request\r\nimport os\r\nfrom werkzeug.utils import secure_filename\r\n\r\n\r\n# <------------------------- ASHLEE ------------------------------>\r\n# Our Login Manager\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return Account.get_account_by_id(user_id)  # Fetch user from the database\r\n\r\n\r\n@app.route(\"/admin\")\r\n@app.route(\"/admin/home\")\r\ndef admin_home():  # ashlee\r\n    return render_template(\"admin/home.html\")\r\n\r\n\r\n@app.route(\"/admin/login\", methods=[\"GET\", \"POST\"])\r\ndef admin_login():  # ashlee\r\n    # if already logged in, what's the point?\r\n    if is_account_id_in_session():\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    def login_error():\r\n        return redirect(\"%s?error=1\" % url_for(\"admin_login\"))\r\n\r\n    if request.method == \"POST\":\r\n        # That means user submitted login form. Check errors.\r\n        login = Account.login_user(request.form[\"email\"],\r\n                                   request.form[\"password\"])\r\n        if login is not None:\r\n            # user entered correct credentials\r\n            # TODO Link dashboard or something from here\r\n            session[\"account_id\"] = login.account_id\r\n            session[\"coupon_systems_active_idx\"] = login.account_id - 1\r\n            return redirect(url_for(\"admin_home\"))\r\n        return login_error()\r\n    return render_template(\"admin/login.html\")\r\n\r\n\r\n@app.route(\"/admin/register\", methods=[\"GET\", \"POST\"])\r\ndef admin_register():  # ashlee\r\n    # if already logged in, what's the point?\r\n    if is_account_id_in_session():\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    def reg_error(ex=None):\r\n        if ex is not None:\r\n            if Account.EMAIL_ALREADY_EXISTS in ex.args:\r\n                return redirect(\"%s?emailExists=1\" % url_for(\"admin_register\"))\r\n        # Given js validation, shouldn't reach here by a normal user.\r\n        return redirect(\"%s?error=1\" % url_for(\"admin_register\"))\r\n\r\n    if request.method == \"POST\":\r\n        # Check for errors in the form submitted\r\n        if (request.form[\"tosAgree\"] == \"agreed\"\r\n                and request.form[\"email\"] != \"\"  # not blank email\r\n                and request.form[\"name\"] != \"\"  # not blank restaurant name\r\n                and request.form[\"password\"] != \"\"  # not blank pw\r\n                and request.form[\"password\"] == request.form[\"passwordAgain\"]\r\n                and len(request.form[\"password\"]) >= 4\r\n                and len(request.form[\"password\"]) <= 20):\r\n            try:\r\n                account = Admin(request.form[\"name\"], request.form[\"email\"],\r\n                                request.form[\"password\"])\r\n            except Exception as e:\r\n                logging.info(\"admin_register: error %s\" % e)\r\n                traceback.print_exc()\r\n                return reg_error(e)  # handle errors here\r\n        else:\r\n            return reg_error()\r\n\r\n        # Successfully registered\r\n        # TODO: Link dashboard or something\r\n        # TODO: Set flask session\r\n        session[\"account_id\"] = account.account_id\r\n\r\n        # TEMPORARY FOR WEEK 13\r\n        coupon_systems_list = []\r\n\r\n        with shelve.open(\"coupon\", 'c') as db:\r\n            if \"coupon_systems\" in db:\r\n                coupon_systems_list = db[\"coupon_systems\"]\r\n            else:\r\n                coupon_systems_list.append(CouponSystem())\r\n\r\n        coupon_systems_list.append(CouponSystem())\r\n        session[\"coupon_systems_active_idx\"] = account.account_id - 1\r\n\r\n        with shelve.open(\"coupon\", 'c') as db:\r\n            db[\"coupon_systems\"] = coupon_systems_list\r\n\r\n        return redirect(url_for(\"admin_myrestaurant\"))\r\n\r\n    return render_template(\"admin/register.html\")\r\n\r\n\r\n@app.route(\"/admin/logout\")\r\ndef admin_logout():\r\n    # TODO: Replace with flask-login\r\n    try:\r\n        if \"account_id\" in session:\r\n            logging.info(\"admin_logout(): Admin %s logged out\"\r\n                         % gabi(session[\"account_id\"]).get_email())\r\n            del session[\"account_id\"]\r\n        else:\r\n            raise Exception(\"account_id not valid in session\")\r\n    except Exception as e:\r\n        logging.info(\"admin_logout(): Failed logout - lag or click twice (%s)\" % e)\r\n\r\n    logout_user()\r\n    return redirect(url_for(\"admin_home\"))\r\n\r\n\r\n# API for updating account, to be called by Account Settings\r\n@app.route(\"/admin/updateAccount\", methods=[\"GET\", \"POST\"])\r\ndef admin_update_account():\r\n    # TODO: Implement admin account soft-deletion\r\n    #       and update restaurant name\r\n\r\n    if request.method == \"GET\":\r\n        flash(\"fail\")\r\n        return redirect(url_for(\"admin_home\"))\r\n    if not is_account_id_in_session():\r\n        flash(\"fail\")\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    # Check if current password entered was correct\r\n    if not is_account_id_in_session() \\\r\n            .check_password_hash(request.form[\"updateSettingsPw\"]):\r\n        flash(\"Current Password is Wrong\")\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    response = \"\"\r\n    if \"changeName\" in request.form:\r\n        if request.form[\"changeName\"] != \"\":\r\n            flash(\"Successfully updated account name from %s to %s\"\r\n                  % (getattr(is_account_id_in_session(), \"name\"),\r\n                     request.form[\"changeName\"]))\r\n            is_account_id_in_session().restaurant_name = request.form[\"changeName\"]\r\n\r\n    if \"changeEmail\" in request.form:\r\n        if request.form[\"changeEmail\"] != \"\":\r\n            result = (is_account_id_in_session()\r\n                      .set_email(request.form[\"changeEmail\"]))\r\n            if result == Account.EMAIL_CHANGE_SUCCESS:\r\n                flash(\"Successfully updated email\")\r\n            elif result == Account.EMAIL_CHANGE_ALREADY_EXISTS:\r\n                flash(\"Failed updating email, Email already Exists\")\r\n            elif result == Account.EMAIL_CHANGE_INVALID:\r\n                flash(\"Failed updating email, email is Invalid\")\r\n\r\n    if \"changePw\" in request.form:\r\n        if request.form[\"changePw\"] != request.form[\"changePwConfirm\"]:\r\n            flash(\"Confirm Password does not match Password\")\r\n        elif request.form[\"changePw\"] != \"\":\r\n            is_account_id_in_session() \\\r\n                .set_password_hash(request.form[\"changePw\"])\r\n            flash(\"Successfully updated password\")\r\n\r\n    save_account_db()\r\n    return redirect(url_for(\"admin_home\"))\r\n\r\n\r\n# IAIIS - is logged in?\r\ndef is_account_id_in_session() -> Account or None:  # for flask\r\n    if \"account_id\" in session:\r\n        # account value exists in session, check if admin account active\r\n        if Admin.check_active(gabi(session[\"account_id\"])) is not None:\r\n            logging.info(\r\n                \"IAIIS: Account id of %s is active and inside session\" %\r\n                session[\"account_id\"])\r\n            return gabi(session[\"account_id\"])\r\n    else:\r\n        logging.info(\"IAIIS: Account id is NOT inside session or disabled\")\r\n    return None\r\n\r\n\r\n# Get account by ID\r\ndef gabi(account_id) -> Account:  # for flask\r\n    return Account.get_account_by_id(account_id)\r\n\r\n\r\n@app.route(\"/admin/deleteAccount\")\r\ndef delete_admin_account():\r\n    if is_account_id_in_session():\r\n        is_account_id_in_session().hard_delete_account()\r\n        flash(\"Successfully deleted your account\")\r\n    else:\r\n        flash(\"Failed to delete your account!\")\r\n\r\n    return redirect(url_for(\"admin_logout\"))\r\n\r\n\r\n# Get ADMIN account by ID\r\n# def gaabi(account_id):  # for our internal use to make other Flask functions\r\n#     return Admin.get_account_by_id(account_id)\r\n\r\n\r\ndef get_restaurant_name_by_id(restaurant_id):\r\n    restaurant_account = gabi(restaurant_id)\r\n    return getattr(restaurant_account, \"restaurant_name\", None)\r\n\r\n\r\n# Used for the Account Settings pane.\r\ndef get_account_email(account: Account):\r\n    try:\r\n        return account.get_email()\r\n    except Exception as e:\r\n        logging.info(e)\r\n        return \"ERROR\"\r\n\r\n\r\n# TODO; store Flask session info in shelve db\r\n\r\n# Activate global function for jinja\r\napp.jinja_env.globals.update(is_account_id_in_session=is_account_id_in_session)\r\n# app.jinja_env.globals.update(gabi=gabi)\r\napp.jinja_env.globals.update(\r\n    get_restaurant_name_by_id=get_restaurant_name_by_id)\r\napp.jinja_env.globals.update(get_account_email=get_account_email)\r\n\r\n\r\n# for testing only - to remove on final!\r\n@app.route(\"/admin/coupon/createExamples\")\r\ndef admin_coupon_add_examples():\r\n    coupon_systems_list = []\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        if \"coupon_systems\" in db:\r\n            coupon_systems_list = db[\"coupon_systems\"]\r\n        else:\r\n            coupon_systems_list.append(CouponSystem())\r\n\r\n    # TEMPORARY FOR WEEK 13 ONLY\r\n    # session[\"coupon_systems_active_idx\"] = 0\r\n    active_coupon_system_idx = session[\"coupon_systems_active_idx\"]\r\n\r\n    coupon_systems_list[active_coupon_system_idx].new_coupon(\"FoodyPulse3\",\r\n                                                             [\"All: Spaghetti\"],\r\n                                                             CouponSystem.Discount.PERCENTAGE_OFF,\r\n                                                             10,\r\n                                                             (datetime.datetime.datetime(2022, 3, 1)))\r\n\r\n    coupon_systems_list[active_coupon_system_idx].new_coupon(\"Meowbie9\",\r\n                                                             [\"All: Drinks\"],\r\n                                                             CouponSystem.Discount.PERCENTAGE_OFF,\r\n                                                             20,\r\n                                                             (datetime.datetime.datetime(2022, 1, 21)))\r\n\r\n    coupon_systems_list[active_coupon_system_idx].new_coupon(\"CnySpecial\",\r\n                                                             [\"All: Drinks\"],\r\n                                                             CouponSystem.Discount.FIXED_PRICE,\r\n                                                             3.5,\r\n                                                             (datetime.datetime.datetime(2022, 2, 14)))\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        db[\"coupon_systems\"] = coupon_systems_list\r\n\r\n    return redirect(url_for(\"admin_coupon_management\"))\r\n\r\n\r\n@app.route(\"/admin/coupon\")\r\ndef admin_coupon_management():\r\n    # TODO: Replace with flask-login\r\n    # if not logged in, need to login first\r\n    if not is_account_id_in_session():\r\n        return redirect(url_for(\"admin_login\"))\r\n\r\n    coupon_systems_list = []\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        if \"coupon_systems\" in db:\r\n            coupon_systems_list = db[\"coupon_systems\"]\r\n        else:\r\n            coupon_systems_list.append(CouponSystem())\r\n\r\n    # TEMPORARY FOR WEEK 13 ONLY\r\n    # session[\"coupon_systems_active_idx\"] = 0\r\n    active_coupon_system_idx = session[\"coupon_systems_active_idx\"]\r\n    selected_system = coupon_systems_list[active_coupon_system_idx]\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        db[\"coupon_systems\"] = coupon_systems_list\r\n\r\n    return render_template(\"admin/retrieveCoupons.html\",\r\n                           len=len,\r\n                           coupon_list=selected_system.list_of_coupons)\r\n\r\n\r\n@app.route(\"/admin/addCoupon\", methods=[\"GET\", \"POST\"])\r\ndef admin_coupon_add():  # todo\r\n    # TODO: Replace with flask-login\r\n    # if not logged in, need to login first\r\n    if not is_account_id_in_session():\r\n        return redirect(url_for(\"admin_login\"))\r\n\r\n    create_coupon_form = CreateCouponForm()\r\n    if request.method == \"POST\" and create_coupon_form.validate():\r\n        coupon_systems_list = []\r\n\r\n        with shelve.open(\"coupon\", 'c') as db:\r\n            if \"coupon_systems\" in db:\r\n                coupon_systems_list = db[\"coupon_systems\"]\r\n            else:\r\n                coupon_systems_list.append(CouponSystem())\r\n\r\n        active_coupon_system_idx = session[\"coupon_systems_active_idx\"]\r\n        cs = coupon_systems_list[active_coupon_system_idx]\r\n\r\n        discount_type = (CouponSystem.Discount.FIXED_PRICE if\r\n                         create_coupon_form.discount_type.data == \"fp\" else\r\n                         CouponSystem.Discount.PERCENTAGE_OFF)\r\n\r\n        cs.new_coupon(create_coupon_form.coupon_code.data,\r\n                      create_coupon_form.food_items.data,\r\n                      discount_type,\r\n                      create_coupon_form.discount_amount.data,\r\n                      create_coupon_form.expiry.data)\r\n\r\n        with shelve.open(\"coupon\", 'c') as db:\r\n            db[\"coupon_systems\"] = coupon_systems_list\r\n\r\n        return redirect(url_for(\"admin_coupon_management\"))\r\n    else:\r\n        return render_template(\"admin/createCoupon.html\", form=create_coupon_form)\r\n\r\n\r\n@app.route(\"/admin/updateCoupon/<int:idx>\")  # index of in coupon systems\r\ndef admin_coupon_update(idx):  # todo: handle active systems\r\n    # TODO: Replace with flask-login\r\n    # if not logged in, need to login first\r\n    if not is_account_id_in_session():\r\n        return redirect(url_for(\"admin_login\"))\r\n\r\n    flash(\"Under Construction\")\r\n    return redirect(url_for(\"admin_coupon_management\"))\r\n\r\n\r\n@app.route(\"/admin/deleteCoupon/<int:id>\", methods=[\"GET\", \"POST\"])\r\ndef admin_coupon_delete(id):  # todo: handle active systems\r\n    # TODO: Replace with flask-login\r\n    # if not logged in, need to login first\r\n    if not is_account_id_in_session():\r\n        return redirect(url_for(\"admin_login\"))\r\n\r\n    coupon_systems_list = []\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        if \"coupon_systems\" in db:\r\n            coupon_systems_list = db[\"coupon_systems\"]\r\n        else:\r\n            coupon_systems_list.append(CouponSystem())\r\n\r\n    active_coupon_system_idx = session[\"coupon_systems_active_idx\"]\r\n    cs = coupon_systems_list[active_coupon_system_idx]\r\n\r\n    for coupon in cs.list_of_coupons:\r\n        if coupon.id == id:\r\n            cs.list_of_coupons.remove(coupon)\r\n\r\n    with shelve.open(\"coupon\", 'c') as db:\r\n        db[\"coupon_systems\"] = coupon_systems_list\r\n\r\n    return redirect(url_for(\"admin_coupon_management\"))\r\n\r\n\r\n# <------------------------- CLARA ------------------------------>\r\n# APP ROUTE TO FOOD MANAGEMENT clara\r\n@app.route(\"/admin/foodManagement\")\r\ndef food_management():\r\n    create_food_form = CreateFoodForm(request.form)\r\n\r\n    # For the add food form\r\n    MAX_SPECIFICATION_ID = 2  # for adding food\r\n    MAX_TOPPING_ID = 3\r\n\r\n    food_dict = {}\r\n    with shelve.open(\"foodypulse\", \"c\") as db:\r\n        try:\r\n            if 'food' in db:\r\n                food_dict = db['food']\r\n            else:\r\n                db['food'] = food_dict\r\n        except Exception as e:\r\n            logging.error(\"create_food: error opening db (%s)\" % e)\r\n\r\n    # storing the food keys in food_dict into a new list for displaying and\r\n    # deleting\r\n    food_list = []\r\n    for key in food_dict:\r\n        food = food_dict.get(key)\r\n        food_list.append(food)\r\n\r\n    return render_template('admin/foodManagement.html',\r\n                           create_food_form=create_food_form,\r\n                           MAX_SPECIFICATION_ID=MAX_SPECIFICATION_ID,\r\n                           MAX_TOPPING_ID=MAX_TOPPING_ID,\r\n                           food_list=food_list)\r\n\r\n\r\nMAX_SPECIFICATION_ID = 2  # for adding food\r\nMAX_TOPPING_ID = 3\r\n\r\n\r\n# ADMIN FOOD FORM clara\r\n@app.route('/admin/addFoodForm', methods=['GET', 'POST'])\r\ndef create_food():\r\n    create_food_form = CreateFoodForm(request.form)\r\n\r\n    # get specifications as a List, no WTForms\r\n    def get_specs() -> list:\r\n        specs = []\r\n\r\n        # do specifications exist in first place?\r\n        for i in range(MAX_SPECIFICATION_ID + 1):\r\n            if \"specification%d\" % i in request.form:\r\n                specs.append(request.form[\"specification%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: specs is %s\" % specs)\r\n        return specs\r\n\r\n        # get toppings as a List, no WTForms\r\n\r\n    def get_top() -> list:\r\n        top = []\r\n\r\n        # do toppings exist in first place?\r\n        for i in range(MAX_TOPPING_ID + 1):\r\n            if \"topping%d\" % i in request.form:\r\n                top.append(request.form[\"topping%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: top is %s\" % top)\r\n        return top\r\n\r\n    # using the WTForms way to get the data\r\n    if request.method == 'POST' and create_food_form.validate():\r\n        food_dict = {}\r\n        with shelve.open(\"foodypulse\", \"c\") as db:\r\n            try:\r\n                if 'food' in db:\r\n                    food_dict = db['food']\r\n                else:\r\n                    db['food'] = food_dict\r\n            except Exception as e:\r\n                logging.error(\"create_food: error opening db (%s)\" % e)\r\n\r\n            # Create a new food object\r\n            food = Food(request.form[\"image\"], create_food_form.item_name.data,\r\n                        create_food_form.description.data,\r\n                        create_food_form.price.data,\r\n                        create_food_form.allergy.data)\r\n\r\n            food.specification = get_specs()  # set specifications as a List\r\n            food.topping = get_top()  # set topping as a List\r\n            food_dict[food.get_food_id()] = food  # set the food_id as key to store\r\n            # the food object\r\n            db['food'] = food_dict\r\n\r\n\r\n        # writeback\r\n        with shelve.open(\"foodypulse\", 'c') as db:\r\n            db['food'] = food_dict\r\n\r\n        return redirect(url_for('food_management'))\r\n\r\n    return render_template('admin/addFoodForm.html', form=create_food_form,\r\n                           MAX_SPECIFICATION_ID=MAX_SPECIFICATION_ID,\r\n                           MAX_TOPPING_ID=MAX_TOPPING_ID, )\r\n\r\n\r\n# Note from Ashlee: when doing integration, please prefix all URLs with /admin/\r\n@app.route('/deleteFood/<int:id>', methods=['POST'])\r\ndef delete_food(id):\r\n    food_dict = {}\r\n    with shelve.open(\"foodypulse\", 'c') as db:\r\n        food_dict = db['food']\r\n        food_dict.pop(id)\r\n        db['food'] = food_dict\r\n\r\n    return redirect(url_for('food_management'))\r\n\r\n\r\n# Note from Ashlee: when doing integration, please prefix all URLs with /admin/\r\n# save new specification and list\r\n@app.route('/updateFood/<int:id>/', methods=['GET', 'POST'])\r\ndef update_food(id):\r\n    update_food_form = CreateFoodForm(request.form)\r\n\r\n\r\n    # get specifications as a List, no WTForms\r\n    def get_specs() -> list:\r\n        specs = []\r\n\r\n        # do specifications exist in first place?\r\n        for i in range(MAX_SPECIFICATION_ID + 1):\r\n            if \"specification%d\" % i in request.form:\r\n                specs.append(request.form[\"specification%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: specs is %s\" % specs)\r\n        return specs\r\n\r\n        # get toppings as a List, no WTForms\r\n\r\n    def get_top() -> list:\r\n        top = []\r\n\r\n        # do toppings exist in first place?\r\n        for i in range(MAX_TOPPING_ID + 1):\r\n            if \"topping%d\" % i in request.form:\r\n                top.append(request.form[\"topping%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: top is %s\" % top)\r\n        return top\r\n\r\n    if request.method == 'POST' and update_food_form.validate():\r\n        food_dict = {}\r\n        try:\r\n            with shelve.open(\"foodypulse\", 'w') as db:\r\n                food_dict = db['food']\r\n                food = food_dict.get(id)\r\n                # food.set_image = request.form[\"image\"]\r\n                food.set_name(update_food_form.item_name.data)\r\n                food.set_description(update_food_form.description.data)\r\n                food.set_price(update_food_form.price.data)\r\n                food.set_allergy(update_food_form.allergy.data)\r\n                food.specification = get_specs()  # set specifications as a List\r\n                food.topping = get_top()  # set topping as a List\r\n                db[\"food\"] = food_dict\r\n        except Exception as e:\r\n            logging.error(\"update_customer: %s\" % e)\r\n            print(\"an error has occured in update customer\")\r\n\r\n        return redirect(\"/admin/foodManagement\")\r\n    else:\r\n        food_dict = {}\r\n        try:\r\n            with shelve.open(\"foodypulse\", 'r') as db:\r\n                food_dict = db['food']\r\n\r\n                food = food_dict.get(id)\r\n\r\n                # food.get_image(request.form[\"image\"])\r\n                update_food_form.item_name.data = food.get_name()\r\n                update_food_form.description.data = food.get_description()\r\n                update_food_form.price.data = food.get_price()\r\n                update_food_form.allergy.data = food.get_allergy()\r\n\r\n                # for food in food_dict:\r\n                #     food.get_specification()\r\n                #     food.get_topping()\r\n                #\r\n        except:\r\n            print(\"Error occured when update food\")\r\n\r\n        return render_template('admin/updateFood.html',\r\n                               form=update_food_form,\r\n                               food=food,\r\n                               MAX_SPECIFICATION_ID=MAX_SPECIFICATION_ID,\r\n                               MAX_TOPPING_ID=MAX_TOPPING_ID)\r\n\r\n\r\n# @app.route('/updateFood/<int:id>/', methods=['GET', 'POST'])\r\n#\r\n# #save new specification and list\r\n#\r\n# def update_food(id):\r\n#     update_food_form = CreateFoodForm(request.form)\r\n#\r\n#     # get specifications as a List, no WTForms\r\n#     def get_specs() -> list:\r\n#         specs = []\r\n#\r\n#         # do specifications exist in first place?\r\n#         for i in range(MAX_SPECIFICATION_ID + 1):\r\n#             if \"specification%d\" % i in request.form:\r\n#                 specs.append(request.form[\"specification%d\" % i])\r\n#             else:\r\n#                 break\r\n#\r\n#         logging.info(\"create_food: specs is %s\" % specs)\r\n#         return specs\r\n#\r\n#         # get toppings as a List, no WTForms\r\n#\r\n#     def get_top() -> list:\r\n#         top = []\r\n#\r\n#         # do toppings exist in first place?\r\n#         for i in range(MAX_TOPPING_ID + 1):\r\n#             if \"topping%d\" % i in request.form:\r\n#                 top.append(request.form[\"topping%d\" % i])\r\n#             else:\r\n#                 break\r\n#\r\n#         logging.info(\"create_food: top is %s\" % top)\r\n#         return top\r\n#\r\n#\r\n#     if request.method == 'POST' and update_food_form.validate():\r\n#         food_dict = {}\r\n#         with shelve.open(\"foodypulse\", 'w') as db:\r\n#             food_dict = db['food']\r\n#\r\n#             food = food_dict.get(id)\r\n#             food.set_image(request.form[\"image\"])\r\n#             food.set_name(update_food_form.item_name.data)\r\n#             food.set_description(update_food_form.description.data)\r\n#             food.set_price(update_food_form.price.data)\r\n#             food.set_allergy(update_food_form.allergy.data)\r\n#             food.specification = get_specs()  # set specifications as a List\r\n#             food.topping = get_top()  # set topping as a List\r\n#\r\n#             db['food'] = food_dict\r\n#\r\n#         return redirect(url_for('food_management'))\r\n#     else:\r\n#         food_dict = {}\r\n#         with shelve.open(\"foodypulse\", 'r') as db:\r\n#             food_dict = db['food']\r\n#\r\n#         food = food_dict.get(id)\r\n#         update_food_form.item_name.data = food.get_name()\r\n#         update_food_form.description.data = food.get_description()\r\n#         update_food_form.price.data = food.get_price()\r\n#         update_food_form.allergy.data = food.get_allergy()\r\n#         food.specification = get_specs()  # set specifications as a List\r\n#         food.topping = get_top()  # set topping as a List\r\n#\r\n#         return render_template('admin/updateFood.html', form=update_food_form)\r\n\r\n# <------------------------- YONG LIN ------------------------------>\r\n# YL: for transactions -- creating of dummy data\r\n@app.route(\"/admin/transaction/createExampleTransactions\")\r\ndef create_example_transactions():\r\n    # WARNING - Overrides ALL transactions in the db!\r\n    transaction_list = []\r\n\r\n    # creating a shelve file with dummy data\r\n    # 1: <account id> ; <user_id> ; <option> ; <price> ; <coupons> , <rating>\r\n    t1 = Transaction()\r\n    t1.account_name = 'Yong Lin'\r\n    t1.set_option('Delivery')\r\n    t1.set_price(50.30)\r\n    t1.set_used_coupons('SPAGETIT')\r\n    t1.set_ratings(2)\r\n    transaction_list.append(t1)\r\n\r\n    t2 = Transaction()  # t2\r\n    t2.account_name = 'Ching Chong'\r\n    t2.set_option('Dine-in')\r\n    t2.set_price(80.90)\r\n    t2.set_used_coupons('50PASTA')\r\n    t2.set_ratings(5)\r\n    transaction_list.append(t2)\r\n\r\n    t3 = Transaction()  # t3\r\n    t3.account_name = 'Hosea'\r\n    t3.set_option('Delivery')\r\n    t3.set_price(20.10)\r\n    t3.set_used_coupons('50PASTA')\r\n    t3.set_ratings(1)\r\n    transaction_list.append(t3)\r\n\r\n    t4 = Transaction()  # t4\r\n    t4.account_name = 'Clara'\r\n    t4.set_option('Delivery')\r\n    t4.set_price(58.30)\r\n    t4.set_used_coupons('SPAGETIT')\r\n    t4.set_ratings(2)\r\n    transaction_list.append(t4)\r\n\r\n    t5 = Transaction()  # t5\r\n    t5.account_name = 'Ruri'\r\n    t5.set_option('Dine-in')\r\n    t5.set_price(80.90)\r\n    t5.set_used_coupons('50PASTA')\r\n    t5.set_ratings(3)\r\n    transaction_list.append(t5)\r\n\r\n    t6 = Transaction()  # t6\r\n    t6.account_name = 'Ashlee'\r\n    t6.set_option('Delivery')\r\n    t6.set_price(100.10)\r\n    t6.set_used_coupons('50PASTA')\r\n    t6.set_ratings(2)\r\n    transaction_list.append(t6)\r\n\r\n    t7 = Transaction()\r\n    t7.account_name = 'Hello'\r\n    t7.set_option('Dine-in')\r\n    t7.set_price(10.90)\r\n    t7.set_used_coupons('50PASTA')\r\n    t7.set_ratings(4)\r\n    transaction_list.append(t7)\r\n\r\n    t8 = Transaction()\r\n    t8.account_name = 'Lolita'\r\n    t8.set_option('Delivery')\r\n    t8.set_price(50.30)\r\n    t8.set_used_coupons('SPAGETIT')\r\n    t8.set_ratings(2)\r\n    transaction_list.append(t8)\r\n\r\n    t9 = Transaction()  # t2\r\n    t9.account_name = 'Cheryln'\r\n    t9.set_option('Dine-in')\r\n    t9.set_price(80.90)\r\n    t9.set_used_coupons('50PASTA')\r\n    t9.set_ratings(5)\r\n    transaction_list.append(t9)\r\n\r\n    t10 = Transaction()  # t4\r\n    t10.account_name = 'Swee Koon'\r\n    t10.set_option('Delivery')\r\n    t10.set_price(58.30)\r\n    t10.set_used_coupons('SPAGETIT')\r\n    t10.set_ratings(2)\r\n    transaction_list.append(t10)\r\n\r\n    t11 = Transaction()  # t5\r\n    t11.account_name = 'Adrian'\r\n    t11.set_option('Dine-in')\r\n    t11.set_price(80.90)\r\n    t11.set_used_coupons('50PASTA')\r\n    t11.set_ratings(3)\r\n    transaction_list.append(t11)\r\n\r\n    t12 = Transaction()  # t6\r\n    t12.account_name = 'Ryan'\r\n    t12.set_option('Delivery')\r\n    t12.set_price(100.10)\r\n    t12.set_used_coupons('50PASTA')\r\n    t12.set_ratings(2)\r\n    transaction_list.append(t12)\r\n\r\n    t13 = Transaction()\r\n    t13.account_name = 'Sammi'\r\n    t13.set_option('Dine-in')\r\n    t13.set_price(10.90)\r\n    t13.set_used_coupons('50PASTA')\r\n    t13.set_ratings(4)\r\n    transaction_list.append(t13)\r\n\r\n    t14 = Transaction()  # t4\r\n    t14.account_name = 'Vianna'\r\n    t14.set_option('Delivery')\r\n    t14.set_price(58.30)\r\n    t14.set_used_coupons('SPAGETIT')\r\n    t14.set_ratings(2)\r\n    transaction_list.append(t14)\r\n\r\n    t15 = Transaction()  # t5\r\n    t15.account_name = 'Dylan'\r\n    t15.set_option('Dine-in')\r\n    t15.set_price(80.90)\r\n    t15.set_used_coupons('50PASTA')\r\n    t15.set_ratings(3)\r\n    transaction_list.append(t15)\r\n\r\n    t16 = Transaction()  # t6\r\n    t16.account_name = 'Chit Boon'\r\n    t16.set_option('Delivery')\r\n    t16.set_price(100.10)\r\n    t16.set_used_coupons('50PASTA')\r\n    t16.set_ratings(2)\r\n    transaction_list.append(t16)\r\n\r\n    t17 = Transaction()\r\n    t17.account_name = 'Kit Fan'\r\n    t17.set_option('Dine-in')\r\n    t17.set_price(10.90)\r\n    t17.set_used_coupons('50PASTA')\r\n    t17.set_ratings(4)\r\n    transaction_list.append(t17)\r\n\r\n    t18 = Transaction()\r\n    t18.account_name = 'Gabriel Choo'\r\n    t18.set_option('Delivery')\r\n    t18.set_price(50.30)\r\n    t18.set_used_coupons('SPAGETIT')\r\n    t18.set_ratings(2)\r\n    transaction_list.append(t18)\r\n\r\n    t19 = Transaction()  # t2\r\n    t19.account_name = 'Bryan Hoo'\r\n    t19.set_option('Dine-in')\r\n    t19.set_price(80.90)\r\n    t19.set_used_coupons('50PASTA')\r\n    t19.set_ratings(5)\r\n    transaction_list.append(t19)\r\n\r\n    t20 = Transaction()  # t3\r\n    t20.account_name = 'Yuen Loong'\r\n    t20.set_option('Delivery')\r\n    t20.set_price(20.10)\r\n    t20.set_used_coupons('50PASTA')\r\n    t20.set_ratings(1)\r\n    transaction_list.append(t20)\r\n\r\n    # writing to the database\r\n    with shelve.open(DB_NAME, \"c\") as db:\r\n        try:\r\n            db['shop_transactions'] = transaction_list\r\n        except Exception as e:\r\n            logging.error(\"create_example_transactions: error writing to db (%s)\" % e)\r\n\r\n    return redirect(url_for(\"admin_transaction\"))\r\n\r\n\r\n# YL: for transactions -- reading of data and displaying (R in CRUD)\r\n@app.route(\"/admin/transaction\")\r\ndef admin_transaction():\r\n    # read transactions from db\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        if 'shop_transactions' in db:\r\n            transaction_list = db['shop_transactions']\r\n            print(db['shop_transactions'])\r\n            logging.info(\"admin_transaction: reading from db['shop_transactions']\"\r\n                         \", %d elems\" % len(db[\"shop_transactions\"]))\r\n        else:\r\n            logging.info(\"admin_transaction: nothing found in db, starting empty\")\r\n            transaction_list = []\r\n\r\n    def get_transaction_by_id(transaction_id):  # debug\r\n        for transaction in transaction_list:\r\n            if transaction_id == transaction.count_id:\r\n                return transaction\r\n\r\n    return render_template(\"admin/transaction.html\",\r\n                           count=len(transaction_list),\r\n                           transaction_list=transaction_list)\r\n\r\n\r\n# YL: for transactions -- soft delete (D in CRUD)\r\n# soft delete -> restaurant can soft delete transactions jic if the transaction is cancelled\r\n@app.route('/admin/transaction/delete/<transaction_id>')\r\ndef delete_transaction(transaction_id):\r\n    transaction_id = int(transaction_id)\r\n\r\n    transaction_list = []\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        for transaction in db['shop_transactions']:\r\n            transaction_list.append(transaction)\r\n\r\n    def get_transaction_by_id(t_id):  # debug\r\n        for t in transaction_list:\r\n            if t_id == t.count_id:\r\n                return t\r\n\r\n    logging.info(\"delete_transaction: deleted transaction with id %d\"\r\n                 % transaction_id)\r\n\r\n    # set instance attribute 'deleted' of Transaction.py = False\r\n    get_transaction_by_id(transaction_id).deleted = True\r\n\r\n    # writeback to shelve\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        db[\"shop_transactions\"] = transaction_list\r\n\r\n    return redirect(url_for('admin_transaction'))\r\n\r\n\r\n# certification -- xu yong lin\r\n# YL: for certification -- form (C in CRUD)\r\n@app.route(\"/admin/uploadCertification\")\r\ndef test_upload():\r\n    return render_template(\"admin/certification.html\")\r\n\r\n\r\n# def upload_cert():\r\n#     certification_dict = {}\r\n#     nb = 'NIL'\r\n#     npnl = 'NIL'\r\n#     if request.method == 'POST':\r\n#\r\n#         with shelve.open(DB_NAME, 'c') as db:\r\n#             try:\r\n#                 certification_dict = db['certification']\r\n#                 print(certification_dict)\r\n#             except Exception as e:\r\n#                 logging.error(\"Error in retrieving certificate from \"\"certification.db (%s)\" % e)\r\n#             # create a new Certification Object\r\n#             certchecks = request.form.getlist('certCheck')\r\n#             print(certchecks)\r\n#             for i in certchecks:\r\n#                 if 'NoBeef' in certchecks:\r\n#                     nb = 'YES'\r\n#                 elif 'NoPorkNoLard' in certchecks:\r\n#                     npnl = 'Yes'\r\n#                 else:\r\n#                     print('something is wrong ')\r\n#             print(npnl)\r\n#             print(nb)\r\n#\r\n#             certification = Certification(request.form[\"hygieneDocument\"], request.form[\"halalDocument\"],\r\n#                                           request.form[\"vegetarianDocument\"], request.form[\"veganDocument\"],\r\n#                                           npnl, nb)\r\n#             certification_dict[certification.id] = certification\r\n#             db['certification'] = certification_dict\r\n#\r\n#             return redirect(url_for('read_cert'))\r\n#         # update: cert dict => get the correct cert by id\r\n#\r\n#     return render_template(\"admin/certification.html\")\r\n\r\n\r\n# YL: for certification -- reading of data and displaying it to myRestaurant (C in CRUD)\r\n\r\n@app.route('/admin/uploader', methods=['GET', 'POST'])\r\ndef uploader():\r\n    certification_dict = {}\r\n    nb = 'NIL'\r\n    npnl = 'NIL'\r\n    if request.method == 'POST':\r\n        app.config['UPLOADED_PDF'] = 'application/static/restaurantCertification/'\r\n\r\n        with shelve.open(DB_NAME, 'c') as db:\r\n            try:\r\n                certification_dict = db['certification']\r\n                print(certification_dict)\r\n            except Exception as e:\r\n                logging.error(\"uploader: \"\"certification.db (%s)\" % e)\r\n\r\n            # create a new certification object\r\n            # certchecks = request.form.getlist('certCheck')\r\n            # print(certchecks)\r\n            # for i in certchecks:\r\n            #     if 'NoBeef' in certchecks:\r\n            #         nb = 'YES'\r\n            #     elif 'NoPorkNoLard' in certchecks:\r\n            #         npnl = 'Yes'\r\n            #     else:\r\n            #         print('something is wrong ')\r\n            # print(npnl)\r\n            # print(nb)\r\n            f = request.files['hygieneDocument']\r\n            filename = secure_filename(f.filename)\r\n\r\n            import os\r\n            import os.path\r\n            os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])), exist_ok=True)\r\n            f.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + filename)\r\n\r\n            logging.info('file uploaded successfully')\r\n            cert = Certification(f)\r\n\r\n            certification_dict['cert.id'] = cert\r\n            db['certification'] = certification_dict\r\n\r\n            return redirect(url_for('read_cert'))\r\n\r\n\r\n@app.route(\"/admin/certification\")\r\ndef read_cert():\r\n    certification_dict = {}\r\n    with shelve.open(DB_NAME, \"c\") as db:\r\n        try:\r\n            if 'certification' in db:\r\n                certification_dict = db['certification']\r\n\r\n            else:\r\n                db['certification'] = certification_dict\r\n                print(certification_dict)\r\n                logging.info(\"read_cert: nothing found in db, starting empty\")\r\n        except Exception as e:\r\n            logging.error(\"read_cert: error opening db (%s)\" % e)\r\n\r\n        certificate_list = []\r\n        for key in certification_dict:\r\n            food = certification_dict.get(key)\r\n            certificate_list.append(food)\r\n\r\n    return render_template(\"admin/certification2.html\", certificate_list=certificate_list)\r\n\r\n\r\n# YL: for certification -- Update certification [if it expires/needs to be updated] (U in CRUD)\r\n# TODO: REDIRECT BACK TO FORM IN 'C IN CRUD'\r\n# TODO: CHECK IF THE FILES ARE THE SAME AND UPDATE THE DETAILS\r\n@app.route('/admin/updateCertification/<int:id>', methods=['GET', 'POST'])\r\ndef update_cert(id):\r\n    nb = 'NIL'\r\n    npnl = 'NIL'\r\n\r\n    if request.method == 'POST':\r\n        certification_dict = {}\r\n        try:\r\n            with shelve.open(DB_NAME, \"c\") as db:\r\n                certification_dict = db['certification']\r\n\r\n                # updating the information\r\n                certchecks = request.form.getlist('certCheck')\r\n                for i in certchecks:\r\n                    if 'NoBeef' in certchecks:\r\n                        nb = 'YES'\r\n                    elif 'No Pork No Lard' in certchecks:\r\n                        npnl = 'YES'\r\n                    else:\r\n                        print('something is wrong ')\r\n\r\n                certification = certification_dict.get(id)\r\n                # inset values of the updated thing inside\r\n                certification.hygiene_cert = request.form[\"hygieneDocument\"]\r\n                certification.halal_cert = request.form[\"halalDocument\"]\r\n                certification.vegetarian_cert = request.form[\"vegetarianDocument\"]\r\n                certification.vegan_cert = request.form[\"veganDocument\"]\r\n                certification.noPorknoLard = npnl\r\n                certification.noBeef = nb\r\n                print(certification)\r\n\r\n                # writeback\r\n                db['certification'] = certification_dict\r\n        except Exception as e:\r\n            logging.error(\"Error in retrieving certificate from \"\"certification.db (%s)\" % e)\r\n\r\n        return redirect(url_for('read_cert'))\r\n    else:\r\n        certification_dict = {}\r\n        id_list = []\r\n        print('I am reading from shelve')\r\n        try:\r\n            # reading to display the pre-existing inputs\r\n            with shelve.open(DB_NAME, \"c\") as db:\r\n                certification_dict = db['certification']\r\n        except Exception as e:\r\n            logging.error(\"Error in retrieving certificate from \"\"certification.db (%s)\" % e)\r\n\r\n        c = certification_dict.get(id)\r\n        id_list.append(c)\r\n        print(c.hygiene_cert)\r\n        return render_template('admin/updateCertification.html', id_list=id_list)\r\n\r\n\r\n# YL: for certification -- Delete (D in CRUD)\r\n# TODO: DELETE BUTTON (similar to delete User in SimpleWebApplication)\r\n# not soft delete!\r\n@app.route('/deleteCertification/<int:id>', methods=['POST'])\r\ndef delete_cert(id):\r\n    with shelve.open(DB_NAME, 'w') as db:\r\n        try:\r\n            certification_dict = db['certification']\r\n            if id in certification_dict:\r\n                certification_dict.pop(id)\r\n            db['certification'] = certification_dict\r\n        except Exception as e:\r\n            logging.error(\"delete_food: error opening db (%s)\" % e)\r\n\r\n    return redirect(url_for('read_cert'))\r\n\r\n\r\n# def upload_cert():\r\n#     i = 1\r\n#     certification_form = DocumentUploadForm(request.form)\r\n#     certifications_dict = {}\r\n#     if request.method == 'POST' and certification_form.validate():\r\n#         db = shelve.open(DB_NAME, 'c')\r\n#         try:\r\n#             certifications_dict = db['certification']\r\n#         except Exception as e:\r\n#             logging.error(\"Error in retrieving Certification from \"\r\n#                           \"certification.db (%s)\" % e)\r\n#\r\n#         certifications_dict[i] = i\r\n#         db['certification'] = certifications_dict\r\n#\r\n#         db.close()\r\n#\r\n#     certification = Certification(request.form[\"hygieneDocument\"])\r\n#\r\n#     # if certification_form.validate_on_submit():\r\n#     #     # file path to save files to:\r\n#     #     assets_dir = os.path.join(os.path.dirname(app.instance_path), 'restaurantCertification')\r\n#     #     # assests_dir ==> C:\\Users\\yongl\\appdpj\\src\\restaurantCertification\r\n#     #     hygiene = certification_form.hygiene_doc.data\r\n#     #\r\n#     #     # saving\r\n#     #     hygiene.save(os.path.join(assets_dir, 'hygiene', hygiene.filename))\r\n#     #\r\n#     #     logging.info('Document uploaded successfully.')\r\n#     #     return redirect(url_for('admin_home'))\r\n#\r\n#     return render_template(\"admin/certification2.html\")\r\n\r\n\r\n# @app.route(\"/admin/certification\", methods=['GET', 'POST'])\r\n# def admin_certification():\r\n#     # TODO: FILE UPLOAD, FILE SAVING, SHELVE UPDATE\r\n#     # set upload directory path\r\n#     certification_form = RestaurantCertification()\r\n#     if certification_form.validate_on_submit():\r\n#         assets_dir = os.path.join(os.path.dirname('./static/restaurantCertification'))\r\n#\r\n#         hygiene = certification_form.hygiene_cert.data\r\n#         halal = certification_form.halal_cert.data\r\n#         vegetarian = certification_form.vegetarian_cert.data\r\n#         vegan = certification_form.vegan_cert.data\r\n#\r\n#         # document save\r\n#         # halal.save(os.path.join(app.config['UPLOAD_FOLDER'], halaldoc_name))\r\n#         hygiene.save(os.path.join(assets_dir, '<userid>', hygiene))\r\n#         halal.save(os.path.join(assets_dir, '<userid>', halal))\r\n#         vegetarian.save(os.path.join(assets_dir, '<userid>', vegetarian))\r\n#         vegan.save(os.path.join(assets_dir, '<userid>', vegan))\r\n#\r\n#         # halal.save(os.path.join('/application/static/restaurantCertification', halaldoc_name))\r\n#         # vegetarian.save(\r\n#         #     os.path.join('/application/static/restaurantCertification', vegetariandoc_name))\r\n#         # vegan.save(os.path.join('/application/static/restaurantCertification', vegandoc_name))\r\n#\r\n#         flash('Document uploaded successfully')\r\n#\r\n#         return redirect(url_for('admin_transaction'))\r\n#\r\n#     return render_template(\"admin/certification.html\",\r\n#                            certification_form=certification_form)\r\n\r\n\r\n# <------------------------- RURI ------------------------------>\r\n# C (Create)\r\n@app.route('/admin/create-restaurant', methods=['GET', 'POST'])\r\ndef admin_myrestaurant():  # ruri\r\n    restaurant_details_form = RestaurantDetailsForm(\r\n        request.form)  # Using the Create Restaurant Form\r\n    create_restaurant = Restaurant_controller()  # Creating a controller /\r\n    # The controller will be the place where we do all the interaction\r\n    if request.method == 'POST' and restaurant_details_form.validate():\r\n        #  The Below code is using one of the controller's method\r\n        #  \"Create_restaurant\"\r\n        # It's passing in the form argument to instantiate the restaurant object\r\n        restaurant_id = uuid.uuid4().hex\r\n        create_restaurant.create_restaurant(\r\n            restaurant_id,\r\n            restaurant_details_form.rest_name.data,\r\n            request.form[\"rest_logo\"],\r\n            restaurant_details_form.rest_contact.data,\r\n            restaurant_details_form.rest_hour_open.data,\r\n            restaurant_details_form.rest_hour_close.data,\r\n            restaurant_details_form.rest_address1.data,\r\n            restaurant_details_form.rest_address2.data,\r\n            restaurant_details_form.rest_postcode.data,\r\n            restaurant_details_form.rest_desc.data,\r\n            restaurant_details_form.rest_bank.data,\r\n            restaurant_details_form.rest_del1.data,\r\n            restaurant_details_form.rest_del2.data,\r\n            restaurant_details_form.rest_del3.data,\r\n            restaurant_details_form.rest_del4.data,\r\n            restaurant_details_form.rest_del5.data\r\n        )\r\n        # flask_login.current_user.restaurant = restaurant_id\r\n        # Once done, it'll redirect to the home page\r\n        return redirect(url_for('admin_home'))\r\n    restaurants_dict = {}\r\n    # if request.method == 'POST' and restaurant_details_form.validate():\r\n    #     db = shelve.open(DB_NAME, 'c')\r\n    #     try:\r\n    #         restaurants_dict = db['Restaurants']\r\n    #     except Exception as e:\r\n    #         logging.error(\"Error in retriedb file doesn't existving\r\n    #         Restaurants from \"\r\n    #                       \"restaurants.db (%s)\" % e)\r\n\r\n    # user_id = session[\"account_id\"]\r\n    # user_object = Restaurant_controller()\r\n    # get_user_object = user_object.find_user_by_id(user_id)\r\n\r\n    # restaurant = Restaurant(uuid.uuid4().hex,\r\n    #                         # request.form[\"alltasks\"],\r\n    #                         restaurant_details_form.rest_name.data,\r\n    #                         request.form[\"rest_logo\"],\r\n    #                         restaurant_details_form.rest_contact.data,\r\n    #                         restaurant_details_form.rest_hour_open.data,\r\n    #                         restaurant_details_form.rest_hour_close.data,\r\n    #                         restaurant_details_form.rest_address1.data,\r\n    #                         restaurant_details_form.rest_address2.data,\r\n    #                         restaurant_details_form.rest_postcode.data,\r\n    #                         restaurant_details_form.rest_desc.data,\r\n    #                         restaurant_details_form.rest_bank.data,\r\n    #                         restaurant_details_form.rest_del1.data,\r\n    #                         restaurant_details_form.rest_del2.data,\r\n    #                         restaurant_details_form.rest_del3.data,\r\n    #                         restaurant_details_form.rest_del4.data,\r\n    #                         restaurant_details_form.rest_del5.data)\r\n    #\r\n    # # print(uuid.uuid4().hex())\r\n    # restaurants_dict[restaurant.get_id()] = restaurant\r\n    # db['Restaurants'] = restaurants_dict\r\n    # db.close()\r\n    # return redirect(url_for('admin_home'))\r\n\r\n    return render_template(\"admin/restaurant.html\",\r\n                           form=restaurant_details_form,\r\n                           restaurant=all_restaurant())\r\n\r\n\r\n# R (Read)\r\n# This is the route that displays all the relevant restaurant details\r\n@app.route('/admin/my-restaurantV2')\r\ndef view_restaurant():\r\n    return render_template('admin/myrestaurantv2.html',\r\n                           restaurant=all_restaurant())\r\n\r\n\r\n# U (Update Form) # This route is to showcase the update route\r\n# This route contains the form that allows us to update the restaurant details\r\n@app.route('/updateRestaurant/<id>', methods=['GET', 'POST'])\r\ndef update_restaurant(id):\r\n    edit_restaurant = RestaurantDetailsForm(request.form)\r\n    restaurant = filter(lambda r: r.get_id() == id,\r\n                        all_restaurant())  # Array Filtering that allows me\r\n    # to track which restaurant the restaurant belongs to for example (ID 1\r\n    # == ID 1)\r\n    # This lambda is a callback function, it's pretty much comparing if the\r\n    # ID of the restaurant is equal to our id argument\r\n    if request.method == 'POST' and edit_restaurant.validate():\r\n        return render_template('updateuserv2.html', form=edit_restaurant,\r\n                               restaurant=restaurant)\r\n    return render_template('updateuserv2.html', form=edit_restaurant,\r\n                           restaurant=all_restaurant())\r\n\r\n\r\n# U (Update)\r\n@app.route('/updateRestaurantConfirm/<id>', methods=['GET', 'POST'])\r\ndef update_restaurant_confirm(id):\r\n    edit_restaurant = RestaurantDetailsForm(request.form)\r\n    editing_restaurant = Restaurant_controller()\r\n    if request.method == 'POST' and edit_restaurant.validate():\r\n        editing_restaurant.edit_restaurant(\r\n            id,\r\n            edit_restaurant.rest_name.data,\r\n            request.form[\"rest_logo\"],\r\n            edit_restaurant.rest_contact.data,\r\n            edit_restaurant.rest_hour_open.data,\r\n            edit_restaurant.rest_hour_close.data,\r\n            edit_restaurant.rest_address1.data,\r\n            edit_restaurant.rest_address2.data,\r\n            edit_restaurant.rest_postcode.data,\r\n            edit_restaurant.rest_desc.data,\r\n            edit_restaurant.rest_bank.data,\r\n            edit_restaurant.rest_del1.data,\r\n            edit_restaurant.rest_del2.data,\r\n            edit_restaurant.rest_del3.data,\r\n            edit_restaurant.rest_del4.data,\r\n            edit_restaurant.rest_del5.data\r\n        )\r\n    return redirect(url_for('view_restaurant'))\r\n\r\n\r\n@app.route('/admin/my-restaurant')\r\ndef retrieve_restaurant():\r\n    restaurants_dict = {}\r\n    db = shelve.open(DB_NAME, 'r')\r\n    restaurants_dict = db['Restaurants']\r\n    db.close()\r\n    restaurants_list = []\r\n    for key in restaurants_dict:\r\n        restaurant = restaurants_dict.get(key)\r\n        restaurants_list.append(restaurant)\r\n\r\n    return render_template('admin/myrestaurant.html',\r\n                           count=len(restaurants_list),\r\n                           restaurants_list=restaurants_list)\r\n\r\n\r\n# @app.route('/updateRestaurant/<int:id>/', methods=['GET', 'POST'])\r\n# def update_restaurant(id):\r\n#     update_restaurant_form = RestaurantDetailsForm(request.form)\r\n#     if request.method == 'POST' and update_restaurant_form.validate():\r\n#         users_dict = {}\r\n#         db = shelve.open('restaurant.db', 'w')\r\n#         restaurants_dict = db['Users']\r\n#\r\n#         user = users_dict.get(id)\r\n#         user.set_first_name(update_restaurant_form.first_name.data)\r\n#         user.set_last_name(update_restaurant_form.last_name.data)\r\n#         user.set_gender(update_restaurant_form.gender.data)\r\n#         user.set_membership(update_restaurant_form.membership.data)\r\n#         user.set_remarks(update_restaurant_form.remarks.data)\r\n#\r\n#         db['Restaurants'] = restaurants_dict\r\n#         db.close()\r\n#\r\n#         return redirect(url_for('retrieve_users'))\r\n#     else:\r\n#         users_dict = {}\r\n#         db = shelve.open('user.db', 'r')\r\n#         users_dict = db['Users']\r\n#         db.close()\r\n#\r\n#         user = users_dict.get(id)\r\n#         update_user_form.first_name.data = user.get_first_name()\r\n#         update_user_form.last_name.data = user.get_last_name()\r\n#         update_user_form.gender.data = user.get_gender()\r\n#         update_user_form.membership.data = user.get_membership()\r\n#         update_user_form.remarks.data = user.get_remarks()\r\n#\r\n#         return render_template('updateUser.html', form=update_user_form)\r\n\r\n@app.route(\"/admin/dashboard\")\r\ndef dashboard():  # ruri\r\n    return render_template(\"admin/dashboard.html\")\r\n\r\n\r\ndef allowed_file(filename):\r\n    return '.' in filename and filename.rsplit('.', 1)[\r\n        1].lower() in ALLOWED_EXTENSIONS\r\n\r\n\r\n@app.route('/', methods=['POST'])\r\ndef upload_image():\r\n    if 'file' not in request.files:\r\n        flash('No file part')\r\n        return redirect(request.url)\r\n    file = request.files['file']\r\n    if file.filename == '':\r\n        flash('No image selected for uploading')\r\n        return redirect(request.url)\r\n    if file and allowed_file(file.filename):\r\n        filename = secure_filename(file.filename)\r\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\r\n        # print('upload_image filename: ' + filename)\r\n        flash('Image successfully uploaded and displayed below')\r\n        return render_template('index.html', filename=filename)\r\n    else:\r\n        flash('Allowed image types are - png, jpg, jpeg, gif')\r\n        return redirect(request.url)\r\n\r\n\r\n@app.route('/display/<filename>')\r\ndef display_image(filename):\r\n    # print('display_image filename: ' + filename)\r\n    return redirect(url_for('static', filename='uploads/' + filename), code=301)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/admin.py b/application/Controllers/admin.py
--- a/application/Controllers/admin.py	(revision 40a25f308192297d644ac82435cf0676ac51bede)
+++ b/application/Controllers/admin.py	(date 1642407919207)
@@ -490,7 +490,6 @@
             # the food object
             db['food'] = food_dict
 
-
         # writeback
         with shelve.open("foodypulse", 'c') as db:
             db['food'] = food_dict
@@ -519,50 +518,17 @@
 @app.route('/updateFood/<int:id>/', methods=['GET', 'POST'])
 def update_food(id):
     update_food_form = CreateFoodForm(request.form)
-
-
-    # get specifications as a List, no WTForms
-    def get_specs() -> list:
-        specs = []
-
-        # do specifications exist in first place?
-        for i in range(MAX_SPECIFICATION_ID + 1):
-            if "specification%d" % i in request.form:
-                specs.append(request.form["specification%d" % i])
-            else:
-                break
-
-        logging.info("create_food: specs is %s" % specs)
-        return specs
-
-        # get toppings as a List, no WTForms
-
-    def get_top() -> list:
-        top = []
-
-        # do toppings exist in first place?
-        for i in range(MAX_TOPPING_ID + 1):
-            if "topping%d" % i in request.form:
-                top.append(request.form["topping%d" % i])
-            else:
-                break
-
-        logging.info("create_food: top is %s" % top)
-        return top
-
     if request.method == 'POST' and update_food_form.validate():
         food_dict = {}
         try:
             with shelve.open("foodypulse", 'w') as db:
                 food_dict = db['food']
                 food = food_dict.get(id)
-                # food.set_image = request.form["image"]
+                # food.set_image(request.form["image"])
                 food.set_name(update_food_form.item_name.data)
                 food.set_description(update_food_form.description.data)
                 food.set_price(update_food_form.price.data)
                 food.set_allergy(update_food_form.allergy.data)
-                food.specification = get_specs()  # set specifications as a List
-                food.topping = get_top()  # set topping as a List
                 db["food"] = food_dict
         except Exception as e:
             logging.error("update_customer: %s" % e)
@@ -576,8 +542,7 @@
                 food_dict = db['food']
 
                 food = food_dict.get(id)
-
-                # food.get_image(request.form["image"])
+                # food.uploadImage = request.form.get("image")
                 update_food_form.item_name.data = food.get_name()
                 update_food_form.description.data = food.get_description()
                 update_food_form.price.data = food.get_price()
@@ -592,7 +557,6 @@
 
         return render_template('admin/updateFood.html',
                                form=update_food_form,
-                               food=food,
                                MAX_SPECIFICATION_ID=MAX_SPECIFICATION_ID,
                                MAX_TOPPING_ID=MAX_TOPPING_ID)
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (mock test 1)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 40a25f308192297d644ac82435cf0676ac51bede)
+++ b/.idea/misc.xml	(date 1642407967627)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (mock test 1)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (src)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
