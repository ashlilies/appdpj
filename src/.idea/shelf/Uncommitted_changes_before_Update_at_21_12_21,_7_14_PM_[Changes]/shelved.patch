Index: application/Controllers/consumer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Controller for the Consumer side of things.\n# New ones go here, not in __init__.\n\n# Fill your @app.routes below here...\nfrom flask import render_template\n\nfrom application import app\n\n@app.route(\"/testing\")\ndef testing_route():\n    return \"testing\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/consumer.py b/application/Controllers/consumer.py
--- a/application/Controllers/consumer.py	(revision 964364330d33ce357940c5404ec8374126cc0735)
+++ b/application/Controllers/consumer.py	(date 1640023244376)
@@ -4,8 +4,15 @@
 # Fill your @app.routes below here...
 from flask import render_template
 
+from flask import Flask, render_template, request, redirect, url_for
+from application.Forms import CreateUserForm, CreateCustomerForm
+import shelve
+from application.Models.User import User
+from application.Models.Customer import Customer
+
 from application import app
 
+
 @app.route("/testing")
 def testing_route():
-    return "testing"
\ No newline at end of file
+    return "testing"
Index: application/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># IF YOU'RE HERE: New routes go in Controllers > admin or consumer!\n\nfrom flask import Flask, render_template, request, redirect, url_for\nfrom application.Forms import CreateUserForm, CreateCustomerForm\nimport shelve\nfrom application.Models.User import User\nfrom application.Models.Customer import Customer\n\napp = Flask(__name__)\napp.secret_key = \"doofypulseEngineers\"  # used for stuff e.g. Flask sessions\n\n# CONSTANTS USED BY OUR PAGES\n# For stuff like colour schemes.\n# Todo\n\n# Includes\nfrom application.Controllers.admin import *\nfrom application.Controllers.consumer import *\n\n\n@app.route('/')\n@app.route('/home')\ndef home():\n    # render a template\n    return render_template('home.html')\n\n\n@app.route('/contactus')\ndef contact_us():\n    # render a template\n    return render_template('contactUs.html')\n\n\n@app.route('/createUser', methods=['GET', 'POST'])\ndef create_user():\n    create_user_form = CreateUserForm(request.form)\n    if request.method == 'POST' and create_user_form.validate():\n        users_dict = {}\n        with shelve.open('user.db', 'c') as db:\n\n            try:\n                if 'Users' in db:\n                    users_dict = db['Users']\n                else:\n                    db['Users'] = users_dict\n            except:\n                print(\"Error in retrieving Users from user.db.\")\n\n            user = User(create_user_form.first_name.data, create_user_form.last_name.data,\n                             create_user_form.gender.data, create_user_form.membership.data,\n                             create_user_form.remarks.data)\n            users_dict[user.get_user_id()] = user\n            db['Users'] = users_dict\n            db[\"count\"] = User.count_id  # VERY IMPORTANT - Save count ID back\n\n            # Test codes\n            # users_dict = db['Users']\n            # user = users_dict[user.get_user_id()]\n            # print(user.get_first_name(), user.get_last_name(), \"was stored in user.db successfully with user_id ==\",\n            #       user.get_user_id())\n\n        return redirect(url_for('retrieve_users'))\n    return render_template('createUser.html', form=create_user_form)\n\n\n@app.route('/createCustomer', methods=['GET', 'POST'])\ndef create_customer():\n    create_customer_form = CreateCustomerForm(request.form)\n    if request.method == 'POST' and create_customer_form.validate():\n        customers_dict = {}\n        with shelve.open('customer.db', 'c') as db:\n\n            try:\n                customers_dict = db['Customers']\n            except:\n                print(\"Error in retrieving Customers from customer.db.\")\n\n            customer = Customer(create_customer_form.first_name.data,\n                                create_customer_form.last_name.data,\n                                create_customer_form.gender.data, create_customer_form.membership.data,\n                                create_customer_form.remarks.data, create_customer_form.email.data,\n                                create_customer_form.date_joined.data,\n                                create_customer_form.address.data, )\n            customers_dict[customer.get_customer_id()] = customer\n            db['Customers'] = customers_dict\n            db[\"count\"] = Customer.count_id\n\n        return redirect(url_for('home'))\n    return render_template('createCustomer.html', form=create_customer_form)\n\n\n@app.route('/retrieveUsers')\ndef retrieve_users():\n    users_dict = {}\n    with shelve.open('user.db', 'r') as db:\n        users_dict = db['Users']\n\n    users_list = []\n    for key in users_dict:\n        user = users_dict.get(key)\n        users_list.append(user)\n\n    return render_template('retrieveUsers.html', count=len(users_list), users_list=users_list)\n\n\n@app.route('/retrieveCustomers')\ndef retrieve_customers():\n    customers_dict = {}\n    with shelve.open('customer.db', 'r') as db:\n        customers_dict = db['Customers']\n\n    customers_list = []\n    for key in customers_dict:\n        customer = customers_dict.get(key)\n        customers_list.append(customer)\n\n    return render_template('retrieveCustomers.html', count=len(customers_list), customers_list=customers_list)\n\n\n@app.route('/updateUser/<int:id>/', methods=['GET', 'POST'])\ndef update_user(id):\n    update_user_form = CreateUserForm(request.form)\n    if request.method == 'POST' and update_user_form.validate():\n        # TODO: Perform checks for access rights or unique values\n        users_dict = {}\n        try:\n            with  shelve.open('user.db', 'w') as db:\n                users_dict = db['Users']\n\n                user = users_dict.get(id)\n                user.set_first_name(update_user_form.first_name.data)\n                user.set_last_name(update_user_form.last_name.data)\n                user.set_gender(update_user_form.gender.data)\n                user.set_membership(update_user_form.membership.data)\n                user.set_remarks(update_user_form.remarks.data)\n                db['Users'] = users_dict\n        except:\n            print('An error have occurred in Update User POST')\n\n        return redirect(url_for('retrieve_users'))\n    else:\n        # TODO: perform checks for access rights here\n        users_dict = {}\n        try:\n            with shelve.open('user.db', 'r') as db:\n                users_dict = db['Users']\n        except:\n            print('An error have occurred in Update User GET')\n\n        user = users_dict.get(id)\n        update_user_form.first_name.data = user.get_first_name()\n        update_user_form.last_name.data = user.get_last_name()\n        update_user_form.gender.data = user.get_gender()\n        update_user_form.membership.data = user.get_membership()\n        update_user_form.remarks.data = user.get_remarks()\n\n        return render_template('updateUser.html', form=update_user_form)\n\n\n@app.route('/updateCustomer/<int:id>/', methods=['GET', 'POST'])\ndef update_customer(id):\n    update_customer_form = CreateCustomerForm(request.form)\n    if request.method == 'POST' and update_customer_form.validate():\n        # TODO: Perform checks for access rights or unique values\n        customers_dict = {}\n        try:\n            with shelve.open('customer.db', 'w') as db:\n                customers_dict = db['Customers']\n\n                customer = customers_dict.get(id)\n                customer.set_first_name(update_customer_form.first_name.data)\n                customer.set_last_name(update_customer_form.last_name.data)\n                customer.set_gender(update_customer_form.gender.data)\n                customer.set_membership(update_customer_form.membership.data)\n                customer.set_remarks(update_customer_form.remarks.data)\n\n                customer.set_date_joined(update_customer_form.date_joined.data)\n                customer.set_email(update_customer_form.email.data)\n                customer.set_address(update_customer_form.address.data)\n\n                db['Customers'] = customers_dict\n        except:\n            print(f'An error have occured in update customer POST')\n\n        return redirect(url_for('retrieve_customers'))\n    else:\n        # TODO: perform checks for access rights here\n        customers_dict = {}\n        try:\n            with shelve.open('customer.db', 'r') as db:\n                customers_dict = db['Customers']\n        except:\n            print('An error have occurred in update customer GET')\n\n        customer = customers_dict.get(id)\n        update_customer_form.first_name.data = customer.get_first_name()\n        update_customer_form.last_name.data = customer.get_last_name()\n        update_customer_form.gender.data = customer.get_gender()\n        update_customer_form.membership.data = customer.get_membership()\n        update_customer_form.remarks.data = customer.get_remarks()\n\n        update_customer_form.email.data = customer.get_email()\n        update_customer_form.date_joined.data = customer.get_date_joined()\n        update_customer_form.address.data = customer.get_address()\n\n        return render_template('updateCustomer.html', form=update_customer_form)\n\n\n@app.route('/deleteUser/<int:id>', methods=['POST'])\ndef delete_user(id):\n    try:\n        with shelve.open('user.db', 'w') as db:\n            users_dict = db['Users']\n            if id in users_dict:\n                users_dict.pop(id)\n            db['Users'] = users_dict\n    except Exception as e:\n        print(f'An Error have occurred in delete_user({id}) - {e}')\n\n    return redirect(url_for('retrieve_users'))\n\n\n@app.route('/deleteCustomer/<int:id>', methods=['POST'])\ndef delete_customer(id):\n    try:\n        with shelve.open('customer.db', 'w') as db:\n            customers_dict = db['Customers']\n            if id in customers_dict:\n                customers_dict.pop(id)\n            db['Customers'] = customers_dict\n    except Exception as e:\n        print(f'An Error have occurred in delete_customer({id}) - {e}')\n\n    return redirect(url_for('retrieve_customers'))\n\n\n# Run before doing anything else; a la main() -ash\nwith app.app_context():\n    # Get current customer and admin ID count to prevent overriding\n    with shelve.open(\"customer.db\", 'c') as db:\n        if \"count\" in db:\n            print(\"Found customer count in db: %d\" % db[\"count\"])\n            Customer.count_id = db[\"count\"]\n        else:\n            print(\"Initializing customer count in db\")\n            db[\"count\"] = Customer.count_id  # initialize it:\n\n    with shelve.open(\"user.db\", 'c') as db:\n        if \"count\" in db:\n            print(\"Found user count in db: %d\" % db[\"count\"])\n            User.count_id = db[\"count\"]\n        else:\n            print(\"Initializing user count in db\")\n            db[\"count\"] = User.count_id  # initialize it:\n\n    app.run()\n\n\nif __name__ == '__main__':\n    app.run()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/__init__.py b/application/__init__.py
--- a/application/__init__.py	(revision 964364330d33ce357940c5404ec8374126cc0735)
+++ b/application/__init__.py	(date 1640023260631)
@@ -14,12 +14,12 @@
 # Todo
 
 # Includes
-from application.Controllers.admin import *
-from application.Controllers.consumer import *
+from application.Controllers.admin import admin_home
+from application.Controllers.consumer import testing_route
 
 
 @app.route('/')
-@app.route('/home')
+# @app.route('/home')
 def home():
     # render a template
     return render_template('home.html')
@@ -49,15 +49,16 @@
             user = User(create_user_form.first_name.data, create_user_form.last_name.data,
                              create_user_form.gender.data, create_user_form.membership.data,
                              create_user_form.remarks.data)
+            # users_dict[user.get_user_id()] = user
             users_dict[user.get_user_id()] = user
             db['Users'] = users_dict
             db["count"] = User.count_id  # VERY IMPORTANT - Save count ID back
 
             # Test codes
-            # users_dict = db['Users']
-            # user = users_dict[user.get_user_id()]
-            # print(user.get_first_name(), user.get_last_name(), "was stored in user.db successfully with user_id ==",
-            #       user.get_user_id())
+            users_dict = db['Users']
+            user = users_dict[user.get_user_id()]
+            print(user.get_first_name(), user.get_last_name(), "was stored in user.db successfully with user_id ==",
+                  user.get_user_id())
 
         return redirect(url_for('retrieve_users'))
     return render_template('createUser.html', form=create_user_form)
@@ -92,8 +93,11 @@
 @app.route('/retrieveUsers')
 def retrieve_users():
     users_dict = {}
-    with shelve.open('user.db', 'r') as db:
-        users_dict = db['Users']
+    with shelve.open('user.db', 'c') as db:  # using 'c' in case not exist
+        if "Users" in db:
+            users_dict = db['Users']
+        else:
+            db["Users"] = users_dict
 
     users_list = []
     for key in users_dict:
@@ -106,8 +110,11 @@
 @app.route('/retrieveCustomers')
 def retrieve_customers():
     customers_dict = {}
-    with shelve.open('customer.db', 'r') as db:
-        customers_dict = db['Customers']
+    with shelve.open('customer.db', 'c') as db:  # using c in case not exist
+        if "Customers" in db:
+            customers_dict = db['Customers']
+        else:
+            db["Customers"] = {}
 
     customers_list = []
     for key in customers_dict:
@@ -242,19 +249,21 @@
             print("Found customer count in db: %d" % db["count"])
             Customer.count_id = db["count"]
         else:
-            print("Initializing customer count in db")
+            print("Initializing customer count and customers in db")
             db["count"] = Customer.count_id  # initialize it:
+            db["Customers"] = {}
 
     with shelve.open("user.db", 'c') as db:
         if "count" in db:
             print("Found user count in db: %d" % db["count"])
             User.count_id = db["count"]
         else:
-            print("Initializing user count in db")
+            print("Initializing user count and users in db")
             db["count"] = User.count_id  # initialize it:
+            db["Users"] = {}
 
     app.run()
 
 
-if __name__ == '__main__':
-    app.run()
+# if __name__ == '__main__':
+#     app.run()
\ No newline at end of file
Index: application/Models/Admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from application.Models.User import User\n\nclass Admin(User):\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Models/Admin.py b/application/Models/Admin.py
--- a/application/Models/Admin.py	(revision 964364330d33ce357940c5404ec8374126cc0735)
+++ b/application/Models/Admin.py	(date 1640020291584)
@@ -1,3 +1,4 @@
-from application.Models.User import User
+from application.Models.FPUser import FPUser
 
 class Admin(User):
+    pass
\ No newline at end of file
Index: application/Controllers/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Controller for the Admin side of things.\nfrom flask import render_template\n\nfrom application import app\n\n\n@app.route(\"/admin\")\n@app.route(\"/admin/home\")\ndef admin_home():\n    return render_template(\"admin/home.html\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/admin.py b/application/Controllers/admin.py
--- a/application/Controllers/admin.py	(revision 964364330d33ce357940c5404ec8374126cc0735)
+++ b/application/Controllers/admin.py	(date 1640023244412)
@@ -1,10 +1,16 @@
 # Controller for the Admin side of things.
 from flask import render_template
 
+from flask import Flask, render_template, request, redirect, url_for
+from application.Forms import CreateUserForm, CreateCustomerForm
+import shelve
+from application.Models.User import User
+from application.Models.Customer import Customer
+
 from application import app
 
 
 @app.route("/admin")
-@app.route("/admin/home")
+# @app.route("/admin/home")
 def admin_home():
     return render_template("admin/home.html")
Index: application/Models/FPUser.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Models/FPUser.py b/application/Models/FPUser.py
new file mode 100644
--- /dev/null	(date 1640020291628)
+++ b/application/Models/FPUser.py	(date 1640020291628)
@@ -0,0 +1,7 @@
+# New user class for FoodyPulse specifically.
+
+class FPUser:
+    count_id = 0
+
+    def __init__(self):
+        pass
\ No newline at end of file
