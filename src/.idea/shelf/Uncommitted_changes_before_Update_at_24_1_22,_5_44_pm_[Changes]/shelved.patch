Index: application/Controllers/admin/admin_ruri.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\nimport traceback\n\nimport flask\nfrom flask import render_template, request, redirect, url_for, session, flash, Flask\nfrom flask_login import logout_user, login_required, current_user\nimport os\nimport os.path\n\nfrom application.CouponForms import CreateCouponForm\nfrom application.Models.Admin import *\nfrom application.Models.CouponSystem import CouponSystem\nfrom application.Models.Certification import Certification\nfrom application.Models.Food import Food\nfrom application.Models.Restaurant import Restaurant\nfrom application import app, login_manager\nfrom application.Models.Transaction import Transaction\nfrom application.adminAddFoodForm import CreateFoodForm\nfrom werkzeug.utils import secure_filename\nfrom application.Models.RestaurantSystem import *\nimport shelve, os\nimport uuid\nfrom application.rest_details_form import *\n\n# Ruri's imported libraries\nimport urllib.request\nimport os\nfrom werkzeug.utils import secure_filename\n\n# <------------------------- RURI ------------------------------>\n# C (Create)\n@app.route('/admin/create-restaurant', methods=['GET', 'POST'])\n@login_required\ndef admin_myrestaurant():  # ruri\n    restaurant_details_form = RestaurantDetailsForm(request.form)  # Using the Create Restaurant Form\n    create_restaurant = RestaurantSystem()  # Creating a controller /\n    # The controller will be the place where we do all the interaction\n    if request.method == 'POST' and restaurant_details_form.validate():\n        #  The Below code is using one of the controller's method\n        #  \"Create_restaurant\"\n        # It's passing in the form argument to instantiate the restaurant object\n        restaurant_id = uuid.uuid4().hex\n        current_user.restaurant_id = restaurant_id\n        # file = request.files[\"rest_logo\"]\n        # file.save(os.path.join(\"application/static/restaurantlogos\", file.filename))\n        # print(current_user.restaurant_id)\n        create_restaurant.create_restaurant(\n            restaurant_id,\n            restaurant_details_form.rest_name.data,\n            request.form.get(\"rest_logo\"),\n            restaurant_details_form.rest_contact.data,\n            restaurant_details_form.rest_hour_open.data,\n            restaurant_details_form.rest_hour_close.data,\n            restaurant_details_form.rest_address1.data,\n            restaurant_details_form.rest_address2.data,\n            restaurant_details_form.rest_postcode.data,\n            restaurant_details_form.rest_desc.data,\n            restaurant_details_form.rest_bank.data,\n            restaurant_details_form.rest_del1.data,\n            restaurant_details_form.rest_del2.data,\n            restaurant_details_form.rest_del3.data,\n            restaurant_details_form.rest_del4.data,\n            restaurant_details_form.rest_del5.data,\n        )\n\n        # ashlee - attach restaurant_id to our current user\n        current_user.restaurant_id = restaurant_id\n        Certification.restaurant_id = restaurant_id\n        Food.restaurant_id = restaurant_id\n        print(Certification.restaurant_id)\n        print(restaurant_id)\n        print(Food.restaurant_id)\n        # RestaurantSystem.get_restaurant_by_id(current_user.restaurant_id)\n\n\n\n        # flask_login.current_user.restaurant = restaurant_id\n        # Once done, it'll redirect to the home page\n        return redirect(url_for('admin_home'))\n    restaurants_dict = {}\n    # if request.method == 'POST' and restaurant_details_form.validate():\n    #     db = shelve.open(DB_NAME, 'c')\n    #     try:\n    #         restaurants_dict = db['Restaurants']\n    #     except Exception as e:\n    #         logging.error(\"Error in retriedb file doesn't existving\n    #         Restaurants from \"\n    #                       \"restaurants.db (%s)\" % e)\n\n    # user_id = session[\"account_id\"]\n    # user_object = Restaurant_controller()\n    # get_user_object = user_object.find_user_by_id(user_id)\n\n    # restaurant = Restaurant(uuid.uuid4().hex,\n    #                         # request.form[\"alltasks\"],\n    #                         restaurant_details_form.rest_name.data,\n    #                         request.form[\"rest_logo\"],\n    #                         restaurant_details_form.rest_contact.data,\n    #                         restaurant_details_form.rest_hour_open.data,\n    #                         restaurant_details_form.rest_hour_close.data,\n    #                         restaurant_details_form.rest_address1.data,\n    #                         restaurant_details_form.rest_address2.data,\n    #                         restaurant_details_form.rest_postcode.data,\n    #                         restaurant_details_form.rest_desc.data,\n    #                         restaurant_details_form.rest_bank.data,\n    #                         restaurant_details_form.rest_del1.data,\n    #                         restaurant_details_form.rest_del2.data,\n    #                         restaurant_details_form.rest_del3.data,\n    #                         restaurant_details_form.rest_del4.data,\n    #                         restaurant_details_form.rest_del5.data)\n    #\n    # # print(uuid.uuid4().hex())\n    # restaurants_dict[restaurant.get_id()] = restaurant\n    # db['Restaurants'] = restaurants_dict\n    # db.close()\n    # return redirect(url_for('admin_home'))\n\n    return render_template(\"admin/restaurant.html\",\n                           form=restaurant_details_form,\n                           restaurant=all_restaurant())\n\n\n# R (Read)\n# This is the route that displays all the relevant restaurant details\n@app.route('/admin/my-restaurant')\ndef view_restaurant():\n    return render_template('admin/myrestaurantv2.html',\n                           restaurant=all_restaurant())\n\n\n# U (Update Form) # This route is to showcase the update route\n# This route contains the form that allows us to update the restaurant details\n@app.route('/updateRestaurant/<id>', methods=['GET', 'POST'])\ndef update_restaurant(id):\n    edit_restaurant = RestaurantDetailsForm(request.form)\n    restaurant = filter(lambda r: r.get_id() == id,\n                        all_restaurant())  # Array Filtering that allows me\n    # to track which restaurant the restaurant belongs to for example (ID 1\n    # == ID 1)\n    # This lambda is a callback function, it's pretty much comparing if the\n    # ID of the restaurant is equal to our id argument\n    if request.method == 'POST' and edit_restaurant.validate():\n        return render_template('admin/updateuserv2.html', form=edit_restaurant,\n                               restaurant=restaurant)\n    return render_template('admin/updateuserv2.html', form=edit_restaurant,\n                           restaurant=all_restaurant())\n\n\n# U (Update)\n@app.route('/updateRestaurantConfirm/<id>', methods=['GET', 'POST'])\ndef update_restaurant_confirm(id):\n    edit_restaurant = RestaurantDetailsForm(request.form)\n    editing_restaurant = RestaurantSystem()\n    if request.method == 'POST' and edit_restaurant.validate():\n        editing_restaurant.edit_restaurant(\n            id,\n            edit_restaurant.rest_name.data,\n            request.form.get(\"rest_logo\"),\n            edit_restaurant.rest_contact.data,\n            edit_restaurant.rest_hour_open.data,\n            edit_restaurant.rest_hour_close.data,\n            edit_restaurant.rest_address1.data,\n            edit_restaurant.rest_address2.data,\n            edit_restaurant.rest_postcode.data,\n            edit_restaurant.rest_desc.data,\n            edit_restaurant.rest_bank.data,\n            edit_restaurant.rest_del1.data,\n            edit_restaurant.rest_del2.data,\n            edit_restaurant.rest_del3.data,\n            edit_restaurant.rest_del4.data,\n            edit_restaurant.rest_del5.data\n        )\n    return redirect(url_for('view_restaurant'))\n\n\n\n@app.route(\"/admin/dashboard\")\ndef dashboard():  # ruri\n    return render_template(\"admin/dashboard.html\")\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/admin/admin_ruri.py b/application/Controllers/admin/admin_ruri.py
--- a/application/Controllers/admin/admin_ruri.py	
+++ b/application/Controllers/admin/admin_ruri.py	
@@ -62,9 +62,9 @@
             restaurant_details_form.rest_del4.data,
             restaurant_details_form.rest_del5.data,
         )
-
         # ashlee - attach restaurant_id to our current user
         current_user.restaurant_id = restaurant_id
+        # ruri - attach restaurant_id to food entries and certificate entries
         Certification.restaurant_id = restaurant_id
         Food.restaurant_id = restaurant_id
         print(Certification.restaurant_id)
@@ -119,7 +119,7 @@
                            form=restaurant_details_form,
                            restaurant=all_restaurant())
 
-
+# Hi
 # R (Read)
 # This is the route that displays all the relevant restaurant details
 @app.route('/admin/my-restaurant')
Index: application/Models/Restaurant.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Ruri\nimport uuid\nimport shelve\nRESTAURANT_DB = 'restaurant_db'\nimport pickle\n# from application.Models.Admin import Admin\n\n\nclass Restaurant():\n    def __init__(self,id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):\n        # super().__init__(restaurant_name)  #using the restaurant name created @ account level\n        # self.user_object = user_object\n        self.id = id\n        self.name = name\n        self.logo = logo\n        self.contact = contact\n        self.open = open\n        self.close = close\n        self.add1 = add1\n        self.add2 = add2\n        self.postc = postc\n        self.bank = bank\n        self.desc = desc\n        self.del1 = del1\n        self.del2 = del2\n        self.del3 = del3\n        self.del4 = del4\n        self.del5 = del5\n\n        # save_db()\n\n    def set_id(self, id):\n        self.id = id\n\n    def get_id(self):\n        return self.id\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def set_logo(self, logo):\n        self.logo = logo\n\n    def get_logo(self):\n        return self.logo\n\n    def set_contact(self, contact):\n        self.contact = contact\n\n    def get_contact(self):\n        return self.contact\n\n    def set_open(self, open):\n        self.open = open\n\n    def get_open(self):\n        return self.open\n\n    def set_close(self, close):\n        self.close = close\n\n    def get_close(self):\n        return self.close\n\n    def set_add1(self, add1):\n        self.add1 = add1\n\n    def get_add1(self):\n        return self.add1\n\n    def set_add2(self, add2):\n        self.add2 = add2\n\n    def get_add2(self):\n        return self.add2\n\n    def set_postc(self, postc):\n        self.postc = postc\n\n    def get_postc(self):\n        return self.postc\n\n    def set_bank(self, bank):\n        self.bank = bank\n\n    def get_bank(self):\n        return self.bank\n\n    def set_desc(self, desc):\n        self.desc = desc\n\n    def get_desc(self):\n        return self.desc\n\n    def set_del1(self, del1):\n        self.del1 = del1\n\n    def get_del1(self):\n        return self.del1\n\n    def set_del2(self, del2):\n        self.del2 = del2\n\n    def get_del2(self):\n        return self.del2\n\n    def set_del3(self, del3):\n        self.del3 = del3\n\n    def get_del3(self):\n        return self.del3\n\n    def set_del4(self, del4):\n        self.del4 = del4\n\n    def get_del4(self):\n        return self.del4\n\n    def set_del5(self, del5):\n        self.del5 = del5\n\n    def get_del5(self):\n        return self.del5\n\n\n\n\n    def save_to_shelve(self):\n        open_shelve = shelve.open(RESTAURANT_DB)\n        try:\n            open_shelve[self.get_id()] = self.serialize()\n        except Exception as e:\n            print(e)\n            return False\n        finally:\n            open_shelve.close()\n\n\n    def serialize(item):\n        return pickle.dumps(item)\n\n# # Ruri\n# from application.Models.Account import save_db\n# import uuid\n# # from application.Models.Admin import Admin\n#\n#\n# class Restaurant():\n#     def init(self, id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):\n#         self.set_id(id)\n#         self.name = name\n#         self.logo = logo\n#         self.contact = contact\n#         self.open = open\n#         self.close = close\n#         self.add1 = add1\n#         self.add2 = add2\n#         self.postc = postc\n#         self.bank = bank\n#         self.desc = desc\n#         self.del1 = del1\n#         self.del2 = del2\n#         self.del3 = del3\n#         self.del4 = del4\n#         self.del5 = del5\n#\n#         save_db()\n#\n#     def set_id(self, id):\n#         self.id = id\n#\n#     def get_id(self):\n#         return self.id\n#\n#     def set_name(self, name):\n#         self.name = name\n#\n#     def get_name(self):\n#         return self.name\n#\n#     # def set_logo(self, logo):\n#     #     self.logo = logo\n#     #\n#     # def get_logo(self):\n#     #     return self.logo\n#\n#     def set_contact(self, contact):\n#         self.contact = contact\n#\n#     def get_contact(self):\n#         return self.contact\n#\n#     def set_open(self, open):\n#         self.open = open\n#\n#     def get_open(self):\n#         return self.open\n#\n#     def set_close(self, close):\n#         self.close = close\n#\n#     def get_close(self):\n#         return self.close\n#\n#     def set_add1(self, add1):\n#         self.add1 = add1\n#\n#     def get_add1(self):\n#         return self.add1\n#\n#     def set_add2(self, add2):\n#         self.add2 = add2\n#\n#     def get_add2(self):\n#         return self.add2\n#\n#     def set_postc(self, postc):\n#         self.postc = postc\n#\n#     def get_postc(self):\n#         return self.postc\n#\n#     def set_bank(self, bank):\n#         self.bank = bank\n#\n#     def get_bank(self):\n#         return self.bank\n#\n#     def set_desc(self, desc):\n#         self.desc = desc\n#\n#     def get_desc(self):\n#         return self.desc\n#\n#     def set_del1(self, del1):\n#         self.del1 = del1\n#\n#     def get_del1(self):\n#         return self.del1\n#\n#     def set_del2(self, del2):\n#         self.del2 = del2\n#\n#     def get_del2(self):\n#         return self.del2\n#\n#     def set_del3(self, del3):\n#         self.del3 = del3\n#\n#     def get_del3(self):\n#         return self.del3\n#\n#     def set_del4(self, del4):\n#         self.del4 = del4\n#\n#     def get_del4(self):\n#         return self.del4\n#\n#     def set_del5(self, del5):\n#         self.del5 = del5\n#\n#     def get_del5(self):\n#         return self.del5\n#\n#     # def get_user_object(self):\n#     #     return self.user_object\n#     #\n#     # def set_user_object(self, user_object):\n#     #     self.user_object = user_object\n#     #
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Models/Restaurant.py b/application/Models/Restaurant.py
--- a/application/Models/Restaurant.py	
+++ b/application/Models/Restaurant.py	
@@ -18,7 +18,7 @@
         self.close = close
         self.add1 = add1
         self.add2 = add2
-        self.postc = postc
+        self.post = postc
         self.bank = bank
         self.desc = desc
         self.del1 = del1
Index: application/Controllers/admin/admin_yonglin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\nimport traceback\n\nimport flask\nfrom flask import render_template, request, redirect, url_for, session, flash, Flask\nimport os\nimport os.path\n\nfrom werkzeug.utils import secure_filename\n\nfrom application import app\nfrom application.Models.Admin import *\nfrom application.Models.Certification import *\nfrom application.Models.Transaction import *\nfrom werkzeug.utils import secure_filename\nimport shelve, os\n\n\n# <------------------------- YONG LIN ------------------------------>\n# YL: for transactions -- creating of dummy data\n\n# old creating of transaction\n@app.route(\"/admin/transaction/createExampleTransactions\")\ndef create_example_transactions():\n    # WARNING - Overrides ALL transactions in the db!\n    transaction_list = []\n\n    # creating a shelve file with dummy data\n    # 1: <account id> ; <user_id> ; <option> ; <price> ; <coupons> , <rating>\n    t1 = Transaction()\n    t1.account_name = 'Yong Lin'\n    t1.set_option('Delivery')\n    t1.set_price(50.30)\n    t1.set_used_coupons('SPAGETIT')\n    t1.set_ratings(2)\n    transaction_list.append(t1)\n\n    t2 = Transaction()  # t2\n    t2.account_name = 'Ching Chong'\n    t2.set_option('Dine-in')\n    t2.set_price(80.90)\n    t2.set_used_coupons('50PASTA')\n    t2.set_ratings(5)\n    transaction_list.append(t2)\n\n    t3 = Transaction()  # t3\n    t3.account_name = 'Hosea'\n    t3.set_option('Delivery')\n    t3.set_price(20.10)\n    t3.set_used_coupons('50PASTA')\n    t3.set_ratings(1)\n    transaction_list.append(t3)\n\n    t4 = Transaction()  # t4\n    t4.account_name = 'Clara'\n    t4.set_option('Delivery')\n    t4.set_price(58.30)\n    t4.set_used_coupons('SPAGETIT')\n    t4.set_ratings(2)\n    transaction_list.append(t4)\n\n    t5 = Transaction()  # t5\n    t5.account_name = 'Ruri'\n    t5.set_option('Dine-in')\n    t5.set_price(80.90)\n    t5.set_used_coupons('50PASTA')\n    t5.set_ratings(3)\n    transaction_list.append(t5)\n\n    t6 = Transaction()  # t6\n    t6.account_name = 'Ashlee'\n    t6.set_option('Delivery')\n    t6.set_price(100.10)\n    t6.set_used_coupons('50PASTA')\n    t6.set_ratings(2)\n    transaction_list.append(t6)\n\n    t7 = Transaction()\n    t7.account_name = 'Hello'\n    t7.set_option('Dine-in')\n    t7.set_price(10.90)\n    t7.set_used_coupons('50PASTA')\n    t7.set_ratings(4)\n    transaction_list.append(t7)\n\n    t8 = Transaction()\n    t8.account_name = 'Lolita'\n    t8.set_option('Delivery')\n    t8.set_price(50.30)\n    t8.set_used_coupons('SPAGETIT')\n    t8.set_ratings(2)\n    transaction_list.append(t8)\n\n    t9 = Transaction()  # t2\n    t9.account_name = 'Cheryln'\n    t9.set_option('Dine-in')\n    t9.set_price(80.90)\n    t9.set_used_coupons('50PASTA')\n    t9.set_ratings(5)\n    transaction_list.append(t9)\n\n    t10 = Transaction()  # t4\n    t10.account_name = 'Swee Koon'\n    t10.set_option('Delivery')\n    t10.set_price(58.30)\n    t10.set_used_coupons('SPAGETIT')\n    t10.set_ratings(2)\n    transaction_list.append(t10)\n\n    t11 = Transaction()  # t5\n    t11.account_name = 'Adrian'\n    t11.set_option('Dine-in')\n    t11.set_price(80.90)\n    t11.set_used_coupons('50PASTA')\n    t11.set_ratings(3)\n    transaction_list.append(t11)\n\n    t12 = Transaction()  # t6\n    t12.account_name = 'Ryan'\n    t12.set_option('Delivery')\n    t12.set_price(100.10)\n    t12.set_used_coupons('50PASTA')\n    t12.set_ratings(2)\n    transaction_list.append(t12)\n\n    t13 = Transaction()\n    t13.account_name = 'Sammi'\n    t13.set_option('Dine-in')\n    t13.set_price(10.90)\n    t13.set_used_coupons('50PASTA')\n    t13.set_ratings(4)\n    transaction_list.append(t13)\n\n    t14 = Transaction()  # t4\n    t14.account_name = 'Vianna'\n    t14.set_option('Delivery')\n    t14.set_price(58.30)\n    t14.set_used_coupons('SPAGETIT')\n    t14.set_ratings(2)\n    transaction_list.append(t14)\n\n    t15 = Transaction()  # t5\n    t15.account_name = 'Dylan'\n    t15.set_option('Dine-in')\n    t15.set_price(80.90)\n    t15.set_used_coupons('50PASTA')\n    t15.set_ratings(3)\n    transaction_list.append(t15)\n\n    t16 = Transaction()  # t6\n    t16.account_name = 'Chit Boon'\n    t16.set_option('Delivery')\n    t16.set_price(100.10)\n    t16.set_used_coupons('50PASTA')\n    t16.set_ratings(2)\n    transaction_list.append(t16)\n\n    t17 = Transaction()\n    t17.account_name = 'Kit Fan'\n    t17.set_option('Dine-in')\n    t17.set_price(10.90)\n    t17.set_used_coupons('50PASTA')\n    t17.set_ratings(4)\n    transaction_list.append(t17)\n\n    t18 = Transaction()\n    t18.account_name = 'Gabriel Choo'\n    t18.set_option('Delivery')\n    t18.set_price(50.30)\n    t18.set_used_coupons('SPAGETIT')\n    t18.set_ratings(2)\n    transaction_list.append(t18)\n\n    t19 = Transaction()  # t2\n    t19.account_name = 'Bryan Hoo'\n    t19.set_option('Dine-in')\n    t19.set_price(80.90)\n    t19.set_used_coupons('50PASTA')\n    t19.set_ratings(5)\n    transaction_list.append(t19)\n\n    t20 = Transaction()  # t3\n    t20.account_name = 'Yuen Loong'\n    t20.set_option('Delivery')\n    t20.set_price(20.10)\n    t20.set_used_coupons('50PASTA')\n    t20.set_ratings(1)\n    transaction_list.append(t20)\n\n    # writing to the database\n    with shelve.open('transaction', \"c\") as db:\n        try:\n            db['shop_transactions'] = transaction_list\n        except Exception as e:\n            logging.error(\"create_example_transactions: error writing to db (%s)\" % e)\n\n    return redirect(url_for(\"admin_transaction\"))\n\n\n# YL: for transactions -- reading of data and displaying (R in CRUD)\n@app.route(\"/admin/transaction\")\ndef admin_transaction():\n    # read transactions from db\n    with shelve.open('transaction_db', 'c') as db:\n        if 'shop_transactions' in db:\n            transaction_list = db['shop_transactions']\n            logging.info(\"admin_transaction: reading from db['shop_transactions']\"\n                         \", %d elems\" % len(db[\"shop_transactions\"]))\n        else:\n            logging.info(\"admin_transaction: nothing found in db, starting empty\")\n            transaction_list = []\n\n    def get_transaction_by_id(transaction_id):  # debug\n        for transaction in transaction_list:\n            if transaction_id == transaction.count_id:\n                return transaction\n\n    return render_template(\"admin/transaction.html\",\n                           count=len(transaction_list),\n                           transaction_list=transaction_list)\n\n\n# YL: for transactions -- soft delete (D in CRUD)\n# soft delete -> restaurant can soft delete transactions jic if the transaction is cancelled\n@app.route('/admin/transaction/delete/<transaction_id>')\ndef delete_transaction(transaction_id):\n    # todo: replace with flask-login\n    # if not logged in, nd to log in first\n    transaction_id = int(transaction_id)\n\n    #\n    # transaction_list = []\n    # with shelve.open('transaction', 'c') as db:\n    #     for transaction in db['shop_transactions']:\n    #         transaction_list.append(transaction)\n    #\n    # def get_transaction_by_id(t_id):  # debug\n    #     for t in transaction_list:\n    #         if t_id == t.count_id:\n    #             return t\n    #\n    # logging.info(\"delete_transaction: deleted transaction with id %d\"\n    #              % transaction_id)\n    #\n    # # set instance attribute 'deleted' of Transaction.py = False\n    # get_transaction_by_id(transaction_id).deleted = True\n    #\n    # # writeback to shelve\n    # with shelve.open('transaction', 'c') as db:\n    #     db[\"shop_transactions\"] = transaction_list\n\n    return redirect(url_for('admin_transaction'))\n\n\n# certification -- xu yong lin\n# YL: for certification -- form (C in CRUD)\n@app.route(\"/admin/uploadCertification\")\ndef test_upload():\n    return render_template(\"admin/certification.html\")\n\n\n@app.route('/admin/uploader', methods=['GET', 'POST'])\ndef uploader():\n    nb = 'NIL'\n    npnl = 'NIL'\n    if request.method == 'POST':\n        # todo: implement file saving logic here\n        restaurant_id = str(uuid.uuid4())\n\n        certchecks = request.form.getlist('certCheck')\n        for i in certchecks:\n            if i == 'NoPorkNoLard':\n                npnl = 'YES'\n            elif i == 'NoBeef':\n                nb = 'YES'\n        print('line 296; nb', nb)\n        print('line 297; npnl', npnl)\n\n        app.config['UPLOADED_PDF'] = f'application/static/restaurantCertification/{restaurant_id}/'\n\n        # file saving -- for hygiene, halal, vegetarian, vegan\n        hygiene = request.files['hygieneDocument']\n        hygieneFile = secure_filename(hygiene.filename)\n        os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])), exist_ok=True)\n        hygiene.save(os.path.join(os.getcwd(), app.config[\n            'UPLOADED_PDF']) + hygieneFile)\n        logging.info('Hygiene -- file uploaded successfully')\n        save_hygiene = f\"application/static/restaurantCertification/{restaurant_id}/{hygieneFile}\"\n\n        halal = request.files['halalDocument']\n        halalFile = secure_filename(halal.filename)\n        if halal.filename != \"\":\n            os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])), exist_ok=True)\n            halal.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + halalFile)\n            logging.info('Halal -- file uploaded successfully')\n            save_halal = f\"application/static/restaurantCertification/{restaurant_id}/{halalFile}\"\n        else:\n            save_halal = ''\n\n        vegetarian = request.files['vegetarianDocument']\n        vegetarianFile = secure_filename(vegetarian.filename)\n        if vegetarian.filename != \"\":\n            os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])),\n                        exist_ok=True)\n            vegetarian.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + vegetarianFile)\n            logging.info('Vegetarian -- file uploaded successfully')\n            save_vegetarian = f\"application/static/restaurantCertification/{restaurant_id}/{vegetarianFile}\"\n        else:\n            save_vegetarian = ''\n\n        vegan = request.files['veganDocument']\n        veganFile = secure_filename(vegan.filename)\n        if vegan.filename != \"\":\n            # TODO: Add logic to save the file to filesystem and the Certification object here\n            app.config['UPLOADED_VEGAN'] = f'application/static/restaurantCertification/{restaurant_id}/'\n            os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])),\n                        exist_ok=True)\n            vegan.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + veganFile)\n            logging.info('Vegan -- file uploaded successfully')\n            save_vegan = f\"application/static/restaurantCertification/{restaurant_id}/{veganFile}\"\n        else:\n            save_vegan = ''\n\n        create_res_cert(restaurant_id, save_hygiene, save_halal, save_vegetarian, save_vegan, npnl, nb)\n\n        return redirect(url_for('read_cert'))\n\n\n@app.route(\"/admin/certification\")\ndef read_cert():\n    # todo: implement session logic\n    return render_template('admin/certification2.html', cert=read_res_cert())\n\n\n# def read_cert():\n#     # todo: include session id and insert the id in order to read the ind restaurant cert\n#     certification_dict = {}\n#     with shelve.open('certification', 'c') as handle:\n#         try:\n#             if 'certification' in handle:\n#                 certification_dict = handle['certification']\n#                 print('existing ', certification_dict)\n#             else:\n#                 handle['certification'] = certification_dict\n#                 logging.info(\"read_cert: nothing found in database, starting empty\")\n#         except Exception as e:\n#             logging.error(\"read_cert: error opening db (%s)\" % e)\n#\n#         certificate_list = []\n#         for key in certification_dict:\n#             food = certification_dict.get(key)\n#             certificate_list.append(food)\n#\n#     return render_template('admin/certification2.html', id=id, certificate_list=certificate_list)\n\n\n# YL: for certification -- Update certification [if it expires/needs to be updated] (U in CRUD)\n@app.route('/admin/updateCertification/<int:id>', methods=['GET', 'POST'])\ndef update_cert(id):\n    nb = 'NIL'\n    npnl = 'NIL'\n\n    if request.method == 'POST':\n        certification_dict = {}\n        try:\n            with shelve.open('certification', \"c\") as db:\n                certification_dict = db['certification']\n\n                # create new class object\n                cert = certification_dict.get(id)\n\n                # get values from checkboxes\n                certchecks = request.form.getlist('certChecks')\n                print(certchecks)\n                for i in certchecks:\n                    if 'NoPorkNoLard' in certchecks:\n                        npnl = 'YES'\n                    if 'NoBeef' in certchecks:\n                        nb = 'YES'\n                    else:\n                        print('update_cert(line401): something wrong with certchecks')\n                cert.noPorknoLard = npnl\n                cert.noBeef = nb\n\n                # HYGIENE DOCUMENT\n                hygiene = request.files.get('hygieneDocument')\n                # saving of new file\n                hygieneFile = secure_filename(hygiene.filename)\n                app.config['UPLOADED_HYGIENE'] = f'application/static/restaurantCertification/hygiene/{cert.id}/'\n                os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_HYGIENE'])), exist_ok=True)\n                hygiene.save(os.path.join(os.path.join(os.getcwd(), app.config['UPLOADED_HYGIENE']) + hygieneFile))\n                if cert.hygiene_cert is not None:\n                    # unlinking existing hygiene doc file\n                    if os.path.exists(\n                            f'application/static/restaurantCertification/hygiene/{cert.id}/{cert.hygiene_cert}'):\n                        os.remove(f'application/static/restaurantCertification/hygiene/{cert.id}/{cert.hygiene_cert}')\n                    logging.info('Successfully removed existing hygiene document')\n                cert.hygiene_cert = f\"application/static/restaurantCertification/hygiene/{cert.id}/{hygieneFile}\"\n\n                # HALAL DOCUMENT\n                halal = request.files.get('halalDocument')\n                # saving of new file\n                halalFile = secure_filename(halal.filename)\n                if halal.filename != '':\n                    # saving of new file\n                    app.config['UPLOADED_HALAL'] = f'application/static/restaurantCertification/halal/{cert.id}/'\n                    os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_HALAL'])),\n                                exist_ok=True)\n                    halal.save(os.path.join(os.path.join(os.getcwd(), app.config['UPLOADED_HALAL']) + halalFile))\n                    # deleting of existing file\n                    if os.path.exists(f'application/static/restaurantCertification/halal/{cert.id}/{cert.halal_cert}'):\n                        os.remove(f'application/static/restaurantCertification/halal/{cert.id}/{cert.halal_cert}')\n                        logging.info('Successfully removed existing halal document')\n                cert.halal_cert = f\"application/static/restaurantCertification/halal/{cert.id}/{halalFile}\"\n\n                # VEGETARIAN DOCUMENT\n                vegetarian = request.files.get('vegetarianDocument')\n                # saving of new file\n                vegetarianFile = secure_filename(vegetarian.filename)\n                if vegetarian.filename != '':\n                    # saving of new file\n                    app.config['UPLOADED_VEGETARIAN'] = f'application/static/restaurantCertification/vegetarian/{cert.id}/'\n                    os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_VEGETARIAN'])),\n                                exist_ok=True)\n                    vegetarian.save(os.path.join(os.path.join(os.getcwd(), app.config['UPLOADED_VEGETARIAN']) + vegetarianFile))\n                    # deleting of existing file\n                    if os.path.exists(f'application/static/restaurantCertification/vegetarian/{cert.id}/{cert.vegetarian_cert}'):\n                        os.remove(f'application/static/restaurantCertification/vegetarian/{cert.id}/{cert.vegetarian_cert}')\n                        logging.info('Successfully removed existing vegetarian document')\n                cert.vegetarian_cert = f\"application/static/restaurantCertification/vegetarian/{cert.id}/{vegetarianFile}\"\n\n                # VEGAN DOCUMENT\n                vegan = request.files.get('veganDocument')\n                # saving of new file\n                veganFile = secure_filename(vegan.filename)\n                if vegan.filename != '':\n                    # saving of new file\n                    app.config['UPLOADED_VEGAN'] = f'application/static/restaurantCertification/vegan/{cert.id}/'\n                    os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_VEGAN'])),\n                                exist_ok=True)\n                    vegan.save(os.path.join(os.path.join(os.getcwd(), app.config['UPLOADED_VEGAN']) + halalFile))\n                    # deleting of existing file\n                    if os.path.exists(f'application/static/restaurantCertification/vegan/{cert.id}//{cert.vegan_cert}'):\n                        os.remove(f'application/static/restaurantCertification/vegan/{cert.id}//{cert.vegan_cert}')\n                        logging.info('Successfully removed existing vegan document')\n                cert.vegan_cert = f\"application/static/restaurantCertification/vegan/{cert.id}/{veganFile}\"\n\n                # writeback\n                db['certification'] = certification_dict\n        except Exception as e:\n            logging.error(\"Error in retrieving certificate from \"\"certification.db (%s)\" % e)\n\n        return redirect(url_for('read_cert'))\n    else:\n        certification_dict = {}\n        id_list = []\n        print('I am reading from shelve')\n        try:\n            # reading to display the pre-existing inputs\n            with shelve.open('certification', \"c\") as db:\n                certification_dict = db['certification']\n        except Exception as e:\n            logging.error(\"Error in retrieving certificate from \"\"certification.db (%s)\" % e)\n\n        c = certification_dict.get(id)\n        id_list.append(c)\n        print(c.hygiene_cert)\n        return render_template('admin/updateCertification.html', id_list=id_list)\n\n\n# YL: for certification -- Delete (D in CRUD)\n@app.route('/deleteCertification/<int:id>', methods=['POST'])\ndef delete_cert(id):\n    with shelve.open('certification', 'w') as db:\n        try:\n            certification_dict = db['certification']\n            if id in certification_dict:\n                certification_dict.pop(id)\n            db['certification'] = certification_dict\n        except Exception as e:\n            logging.error(\"delete_food: error opening db (%s)\" % e)\n\n    return redirect(url_for('read_cert'))\n\n# def upload_cert():\n#     i = 1\n#     certification_form = DocumentUploadForm(request.form)\n#     certifications_dict = {}\n#     if request.method == 'POST' and certification_form.validate():\n#         db = shelve.open(DB_NAME, 'c')\n#         try:\n#             certifications_dict = db['certification']\n#         except Exception as e:\n#             logging.error(\"Error in retrieving Certification from \"\n#                           \"certification.db (%s)\" % e)\n#\n#         certifications_dict[i] = i\n#         db['certification'] = certifications_dict\n#\n#         db.close()\n#\n#     certification = Certification(request.form[\"hygieneDocument\"])\n#\n#     # if certification_form.validate_on_submit():\n#     #     # file path to save files to:\n#     #     assets_dir = os.path.join(os.path.dirname(app.instance_path), 'restaurantCertification')\n#     #     # assests_dir ==> C:\\Users\\yongl\\appdpj\\src\\restaurantCertification\n#     #     hygiene = certification_form.hygiene_doc.data\n#     #\n#     #     # saving\n#     #     hygiene.save(os.path.join(assets_dir, 'hygiene', hygiene.filename))\n#     #\n#     #     logging.info('Document uploaded successfully.')\n#     #     return redirect(url_for('admin_home'))\n#\n#     return render_template(\"admin/certification2.html\")\n\n\n# @app.route(\"/admin/certification\", methods=['GET', 'POST'])\n# def admin_certification():\n#     # TODO: FILE UPLOAD, FILE SAVING, SHELVE UPDATE\n#     # set upload directory path\n#     certification_form = RestaurantCertification()\n#     if certification_form.validate_on_submit():\n#         assets_dir = os.path.join(os.path.dirname('./static/restaurantCertification'))\n#\n#         hygiene = certification_form.hygiene_cert.data\n#         halal = certification_form.halal_cert.data\n#         vegetarian = certification_form.vegetarian_cert.data\n#         vegan = certification_form.vegan_cert.data\n#\n#         # document save\n#         # halal.save(os.path.join(app.config['UPLOAD_FOLDER'], halaldoc_name))\n#         hygiene.save(os.path.join(assets_dir, '<userid>', hygiene))\n#         halal.save(os.path.join(assets_dir, '<userid>', halal))\n#         vegetarian.save(os.path.join(assets_dir, '<userid>', vegetarian))\n#         vegan.save(os.path.join(assets_dir, '<userid>', vegan))\n#\n#         # halal.save(os.path.join('/application/static/restaurantCertification', halaldoc_name))\n#         # vegetarian.save(\n#         #     os.path.join('/application/static/restaurantCertification', vegetariandoc_name))\n#         # vegan.save(os.path.join('/application/static/restaurantCertification', vegandoc_name))\n#\n#         flash('Document uploaded successfully')\n#\n#         return redirect(url_for('admin_transaction'))\n#\n#     return render_template(\"admin/certification.html\",\n#                            certification_form=certification_form)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/admin/admin_yonglin.py b/application/Controllers/admin/admin_yonglin.py
--- a/application/Controllers/admin/admin_yonglin.py	
+++ b/application/Controllers/admin/admin_yonglin.py	
@@ -10,6 +10,7 @@
 
 from application import app
 from application.Models.Admin import *
+from application.Models.Restaurant import *
 from application.Models.Certification import *
 from application.Models.Transaction import *
 from werkzeug.utils import secure_filename
@@ -265,8 +266,6 @@
     npnl = 'NIL'
     if request.method == 'POST':
         # todo: implement file saving logic here
-        restaurant_id = str(uuid.uuid4())
-
         certchecks = request.form.getlist('certCheck')
         for i in certchecks:
             if i == 'NoPorkNoLard':
@@ -276,7 +275,7 @@
         print('line 296; nb', nb)
         print('line 297; npnl', npnl)
 
-        app.config['UPLOADED_PDF'] = f'application/static/restaurantCertification/{restaurant_id}/'
+        app.config['UPLOADED_PDF'] = f'application/static/restaurantCertification/'
 
         # file saving -- for hygiene, halal, vegetarian, vegan
         hygiene = request.files['hygieneDocument']
@@ -285,7 +284,7 @@
         hygiene.save(os.path.join(os.getcwd(), app.config[
             'UPLOADED_PDF']) + hygieneFile)
         logging.info('Hygiene -- file uploaded successfully')
-        save_hygiene = f"application/static/restaurantCertification/{restaurant_id}/{hygieneFile}"
+        save_hygiene = f"application/static/restaurantCertification/{hygieneFile}"
 
         halal = request.files['halalDocument']
         halalFile = secure_filename(halal.filename)
@@ -293,7 +292,7 @@
             os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])), exist_ok=True)
             halal.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + halalFile)
             logging.info('Halal -- file uploaded successfully')
-            save_halal = f"application/static/restaurantCertification/{restaurant_id}/{halalFile}"
+            save_halal = f"application/static/restaurantCertification/{halalFile}"
         else:
             save_halal = ''
 
@@ -304,7 +303,7 @@
                         exist_ok=True)
             vegetarian.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + vegetarianFile)
             logging.info('Vegetarian -- file uploaded successfully')
-            save_vegetarian = f"application/static/restaurantCertification/{restaurant_id}/{vegetarianFile}"
+            save_vegetarian = f"application/static/restaurantCertification/{vegetarianFile}"
         else:
             save_vegetarian = ''
 
@@ -312,17 +311,16 @@
         veganFile = secure_filename(vegan.filename)
         if vegan.filename != "":
             # TODO: Add logic to save the file to filesystem and the Certification object here
-            app.config['UPLOADED_VEGAN'] = f'application/static/restaurantCertification/{restaurant_id}/'
+            app.config['UPLOADED_VEGAN'] = f'application/static/restaurantCertification/'
             os.makedirs(os.path.join(os.getcwd(), os.path.dirname(app.config['UPLOADED_PDF'])),
                         exist_ok=True)
             vegan.save(os.path.join(os.getcwd(), app.config['UPLOADED_PDF']) + veganFile)
             logging.info('Vegan -- file uploaded successfully')
-            save_vegan = f"application/static/restaurantCertification/{restaurant_id}/{veganFile}"
+            save_vegan = f"application/static/restaurantCertification/{veganFile}"
         else:
             save_vegan = ''
 
-        create_res_cert(restaurant_id, save_hygiene, save_halal, save_vegetarian, save_vegan, npnl, nb)
-
+        create_res_cert("hgfbwjnfw",save_hygiene, save_halal, save_vegetarian, save_vegan, npnl, nb)
         return redirect(url_for('read_cert'))
 
 
Index: application/Models/RestaurantSystem.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from application.Models.Restaurant import *\nimport uuid\nimport shelve\nimport pickle\nRESTAURANT_DB = 'restaurant_db'\n\nclass RestaurantSystem():\n    def __init__(self):\n        self.restaurant = all_restaurant()\n\n    # def find_user_by_id(self, id):\n    #     db = shelve.open(DB_NAME, 'r')\n    #     for i in db:\n    #         if i.account_id == id:\n    #             return i\n\n    def find_restaurant_by_id(self,id):\n        for restaurant in self.restaurant: #for all restaurant objects in array\n            if restaurant.get_id() == id: #using id as an identifier\n                return restaurant\n\n    def create_restaurant(self,id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):\n        restaurant = Restaurant(id,name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5)\n        if restaurant.save_to_shelve():\n            self.restaurant.append(restaurant)\n            return True\n        return False\n\n\n    def edit_restaurant(self,id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):\n        find_restaurant = self.find_restaurant_by_id(id)\n        if find_restaurant:\n            find_restaurant.set_name(name)\n            find_restaurant.set_logo(logo)\n            find_restaurant.set_contact(contact)\n            find_restaurant.set_open(open)\n            find_restaurant.set_close(close)\n            find_restaurant.set_add1(add1)\n            find_restaurant.set_add2(add2)\n            find_restaurant.set_postc(postc)\n            find_restaurant.set_desc(desc)\n            find_restaurant.set_bank(bank)\n            find_restaurant.set_del1(del1)\n            find_restaurant.set_del2(del2)\n            find_restaurant.set_del3(del3)\n            find_restaurant.set_del4(del4)\n            find_restaurant.set_del5(del5)\n            find_restaurant.save_to_shelve()\n            print(\"Correct\")\n            return True\n        else:\n            print(\"Wrong\")\n            return False\n\n\ndef all_restaurant():\n    all_restaurant_array = []\n    open_shelve = shelve.open(RESTAURANT_DB)\n    try:\n        for restaurant in open_shelve :\n            all_restaurant_array.append(deserialize(open_shelve[restaurant]))\n    except:\n        print(\"Error\")\n    finally:\n        open_shelve.close()\n    return all_restaurant_array\n\n\n\ndef deserialize(object):\n    try:\n        return pickle.loads(object)\n    except:\n        return None\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Models/RestaurantSystem.py b/application/Models/RestaurantSystem.py
--- a/application/Models/RestaurantSystem.py	
+++ b/application/Models/RestaurantSystem.py	
@@ -2,8 +2,10 @@
 import uuid
 import shelve
 import pickle
+
 RESTAURANT_DB = 'restaurant_db'
 
+
 class RestaurantSystem():
     def __init__(self):
         self.restaurant = all_restaurant()
@@ -14,20 +16,22 @@
     #         if i.account_id == id:
     #             return i
 
-    def find_restaurant_by_id(self,id):
-        for restaurant in self.restaurant: #for all restaurant objects in array
-            if restaurant.get_id() == id: #using id as an identifier
+    def find_restaurant_by_id(self, id):
+        for restaurant in self.restaurant:  # for all restaurant objects in array
+            if restaurant.get_id() == id:  # using id as an identifier
                 return restaurant
 
-    def create_restaurant(self,id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):
-        restaurant = Restaurant(id,name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5)
+    def create_restaurant(self, id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3,
+                          del4, del5):
+        restaurant = Restaurant(id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3,
+                                del4, del5)
         if restaurant.save_to_shelve():
             self.restaurant.append(restaurant)
             return True
         return False
 
-
-    def edit_restaurant(self,id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3, del4, del5):
+    def edit_restaurant(self, id, name, logo, contact, open, close, add1, add2, postc, desc, bank, del1, del2, del3,
+                        del4, del5):
         find_restaurant = self.find_restaurant_by_id(id)
         if find_restaurant:
             find_restaurant.set_name(name)
@@ -57,7 +61,7 @@
     all_restaurant_array = []
     open_shelve = shelve.open(RESTAURANT_DB)
     try:
-        for restaurant in open_shelve :
+        for restaurant in open_shelve:
             all_restaurant_array.append(deserialize(open_shelve[restaurant]))
     except:
         print("Error")
@@ -66,7 +70,6 @@
     return all_restaurant_array
 
 
-
 def deserialize(object):
     try:
         return pickle.loads(object)
Index: application/Models/Certification.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># xu yong lin\n# Consists of: create, read, update, delete of restaurant certifications\nimport logging\nimport pickle\nimport shelve\nimport uuid\n\nDB_CERT = 'certification'\n\n\nclass Certification:\n    def __init__(self, id):\n        # with shelve.open('certification', 'c') as db:\n        #     try:\n        #         Certification.count_id = db['certification_id_count']\n        #     except Exception as e:\n        #         logging.error(\"certification_id_count: error reading from db (%s)\" % e)\n        self.restaurant_id = id\n        self.hygiene_cert = ''\n        self.halal_cert = ''\n        self.vegetarian_cert = ''\n        self.vegan_cert = ''\n        self.noPorknoLard = ''\n        self.noBeef = ''\n\n        # #  database access in Models not Controller\n        # with shelve.open('certification', 'c') as handle:\n        #     handle['certification_id_count'] = Certification.count_id\n\n    # query db for a cert item by passing in the id\n    def query(self, id):\n        with shelve.open('certification', 'c') as handle:\n            try:\n                certification_dict = handle['certification']\n                return certification_dict[str(id)]\n            except Exception as e:\n                print(e)\n                logging.error('Certificate: tried to query id %s but not found' % id)\n                return None\n\n\n# blogs = shelve.open('blog')\n#\n# def create_blog(username, title, body):\n#     id = str(uuid.uuid4())\n#     blog = Blog(id)\n#     blog.title = title\n#     blog.username = username\n#     blog.body = body\n#     blog.created = str(date.today())\n#     blogs[id] = blog\n\n\n# create cert\ndef create_res_cert(restaurant_id, hygiene_c, halal_c, vegetarian_c, vegan_c, noporknolard, nobeef):\n    # create new class object\n    res = Certification(restaurant_id)\n    res.hygiene_cert = hygiene_c\n    res.halal_cert = halal_c\n    res.vegetarian_cert = vegetarian_c\n    res.vegan_cert = vegan_c\n    res.noPorknoLard = noporknolard\n    res.noBeef = nobeef\n    with shelve.open(DB_CERT, 'c') as res_db:\n        try:\n            res_db['certification'] = res\n            logging.info('create_res_cert: successfully created object')\n        except Exception as e:\n            logging.error('create_res_cert: fail to access db (%s)' % e)\n\n\n# read cert\ndef read_res_cert():\n    cert_array = []\n    with shelve.open(DB_CERT, 'c') as res_db:\n        try:\n            cert_array = res_db['certification']\n            print('existing:', cert_array)\n            logging.info('read_res_cert: reading from db')\n            # if 'certification' in res_db:\n            #     cert_dict = res_db[restaurant_id]\n            #     print('existing', cert_dict)\n            # else:\n            #     res_db[restaurant_id] = cert_dict\n            #     logging.info('read_res_cert: nothing found in db, starting empty')\n        except Exception as e:\n            logging.error('read_res_cert: fail to read from db (%s)' % e)\n\n    return cert_array\n\n# update cert\n\n\n# delete cert\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Models/Certification.py b/application/Models/Certification.py
--- a/application/Models/Certification.py	
+++ b/application/Models/Certification.py	
@@ -54,6 +54,7 @@
 # create cert
 def create_res_cert(restaurant_id, hygiene_c, halal_c, vegetarian_c, vegan_c, noporknolard, nobeef):
     # create new class object
+    restaurant_id = "djwbf232"
     res = Certification(restaurant_id)
     res.hygiene_cert = hygiene_c
     res.halal_cert = halal_c
