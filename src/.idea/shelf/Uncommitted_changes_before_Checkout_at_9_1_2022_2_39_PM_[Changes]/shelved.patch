Index: application/Controllers/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Controller for the Admin side of things.\r\n# Do NOT run directly. Run main.py in the appdpj/src/ directory instead.\r\n\r\n# New routes go here, not in __init__.\r\n\r\nfrom flask import render_template, request, redirect, url_for, session, flash\r\nfrom application.Models.Admin import *\r\nfrom application.Models.Food import Food\r\nfrom application.Models.Restaurant import Restaurant\r\nfrom application import app, DB_NAME\r\nfrom application.Models.Transaction import Transaction\r\nfrom application.adminAddFoodForm import CreateFoodForm\r\n\r\nfrom application.restaurantCertification import DocumentUploadForm\r\nimport shelve, os\r\nfrom application.rest_details_form import RestaurantDetailsForm\r\n\r\n\r\n# <------------------------- ASHLEE ------------------------------>\r\n@app.route(\"/admin\")\r\n@app.route(\"/admin/home\")\r\ndef admin_home():  # ashlee\r\n    return render_template(\"admin/home.html\")\r\n\r\n\r\n@app.route(\"/admin/login\", methods=[\"GET\", \"POST\"])\r\ndef admin_login():  # ashlee\r\n    # if already logged in, what's the point?\r\n    if is_account_id_in_session():\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    def login_error():\r\n        return redirect(\"%s?error=1\" % url_for(\"admin_login\"))\r\n\r\n    if request.method == \"POST\":\r\n        # That means user submitted login form. Check errors.\r\n        login = Account.login_user(request.form[\"email\"],\r\n                                   request.form[\"password\"])\r\n        if login is not None:\r\n            # user entered correct credentials\r\n            # TODO Link dashboard or something from here\r\n            session[\"account_id\"] = login.account_id\r\n            return redirect(url_for(\"admin_home\"))\r\n        return login_error()\r\n    return render_template(\"admin/login.html\")\r\n\r\n\r\n@app.route(\"/admin/register\", methods=[\"GET\", \"POST\"])\r\ndef admin_register():  # ashlee\r\n    # if already logged in, what's the point?\r\n    if is_account_id_in_session():\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    def reg_error(ex=None):\r\n        if ex is not None:\r\n            if Account.EMAIL_ALREADY_EXISTS in ex.args:\r\n                return redirect(\"%s?emailExists=1\" % url_for(\"admin_register\"))\r\n        # Given js validation, shouldn't reach here by a normal user.\r\n        return redirect(\"%s?error=1\" % url_for(\"admin_register\"))\r\n\r\n    if request.method == \"POST\":\r\n        # Check for errors in the form submitted\r\n        if (request.form[\"tosAgree\"] == \"agreed\"\r\n                and request.form[\"email\"] != \"\"  # not blank email\r\n                and request.form[\"name\"] != \"\"  # not blank restaurant name\r\n                and request.form[\"password\"] != \"\"  # not blank pw\r\n                and request.form[\"password\"] == request.form[\"passwordAgain\"]):\r\n            try:\r\n                account = Admin(request.form[\"name\"], request.form[\"email\"],\r\n                                request.form[\"password\"])\r\n            except Exception as e:\r\n                logging.info(\"admin_register: error %s\" % e)\r\n                return reg_error(e)  # handle errors here\r\n        else:\r\n            return reg_error()\r\n\r\n        # Successfully registered\r\n        # TODO: Link dashboard or something\r\n        # TODO: Set flask session\r\n        session[\"account_id\"] = account.account_id\r\n        return redirect(url_for(\"admin_home\"))\r\n\r\n    return render_template(\"admin/register.html\")\r\n\r\n\r\n@app.route(\"/admin/logout\")\r\ndef admin_logout():\r\n    if \"account_id\" in session:\r\n        logging.info(\"admin_logout(): Admin %s logged out\"\r\n                     % gabi(session[\"account_id\"]).get_email())\r\n        del session[\"account_id\"]\r\n    else:\r\n        logging.info(\"admin_logout(): Failed logout - lag or click twice\")\r\n\r\n    return redirect(url_for(\"admin_home\"))\r\n\r\n\r\n# API for updating account, to be called by Account Settings\r\n@app.route(\"/admin/updateAccount\", methods=[\"GET\", \"POST\"])\r\ndef admin_update_account():\r\n    # TODO: Implement admin account soft-deletion\r\n    #       and update restaurant name\r\n\r\n    if request.method == \"GET\":\r\n        return \"fail\"\r\n    if not is_account_id_in_session():\r\n        return \"fail\"\r\n\r\n    # Check if current password entered was correct\r\n    if not is_account_id_in_session() \\\r\n            .check_password_hash(request.form[\"updateSettingsPw\"]):\r\n        return \"Current Password is Wrong\"\r\n\r\n    response = \"\"\r\n    if \"changeEmail\" in request.form:\r\n        if request.form[\"changeEmail\"] != \"\":\r\n            result = (is_account_id_in_session()\r\n                      .set_email(request.form[\"changeEmail\"]))\r\n            if result == Account.EMAIL_CHANGE_SUCCESS:\r\n                response = (\"%sSuccessfully updated email<br>\" % response)\r\n            elif result == Account.EMAIL_CHANGE_ALREADY_EXISTS:\r\n                response = (\"%sFailed updating email, Email already Exists<br>\"\r\n                            % response)\r\n            elif result == Account.EMAIL_CHANGE_INVALID:\r\n                response = (\"%sFailed updating email, email is Invalid<br>\"\r\n                            % response)\r\n\r\n    if \"changePw\" in request.form:\r\n        if request.form[\"changePw\"] != request.form[\"changePwConfirm\"]:\r\n            response = (\"%sConfirm Password does not match Password<br>\"\r\n                        % response)\r\n        elif request.form[\"changePw\"] != \"\":\r\n            is_account_id_in_session() \\\r\n                .set_password_hash(request.form[\"changePw\"])\r\n            response = \"%sSuccessfully updated Password<br>\" % response\r\n\r\n    return response\r\n\r\n\r\n# IAIIS - is logged in?\r\ndef is_account_id_in_session() -> Account or None:  # for flask\r\n    if \"account_id\" in session:\r\n        # account value exists in session, check if admin account active\r\n        if Admin.check_active(gabi(session[\"account_id\"])) is not None:\r\n            logging.info(\r\n                \"IAIIS: Account id of %s is active and inside session\" %\r\n                session[\"account_id\"])\r\n            return gabi(session[\"account_id\"])\r\n    else:\r\n        logging.info(\"IAIIS: Account id is NOT inside session or disabled\")\r\n    return None\r\n\r\n\r\n# Get account by ID\r\ndef gabi(account_id) -> Account:  # for flask\r\n    return Account.get_account_by_id(account_id)\r\n\r\n\r\n# Get ADMIN account by ID\r\n# def gaabi(account_id):  # for our internal use to make other Flask functions\r\n#     return Admin.get_account_by_id(account_id)\r\n\r\n\r\ndef get_restaurant_name_by_id(restaurant_id):\r\n    restaurant_account = gabi(restaurant_id)\r\n    return getattr(restaurant_account, \"restaurant_name\", None)\r\n\r\n\r\n# Used for the Account Settings pane.\r\ndef get_account_email(account: Account):\r\n    try:\r\n        return account.get_email()\r\n    except Exception as e:\r\n        logging.info(e)\r\n        return \"ERROR\"\r\n\r\n\r\n# TODO; store Flask session info in shelve db\r\n\r\n# Activate global function for jinja\r\napp.jinja_env.globals.update(is_account_id_in_session=is_account_id_in_session)\r\n# app.jinja_env.globals.update(gabi=gabi)\r\napp.jinja_env.globals.update(\r\n    get_restaurant_name_by_id=get_restaurant_name_by_id)\r\napp.jinja_env.globals.update(get_account_email=get_account_email)\r\n\r\n\r\n# <------------------------- CLARA ------------------------------>\r\n# APP ROUTE TO FOOD MANAGEMENT clara\r\n@app.route(\"/admin/foodManagement\")\r\ndef food_management():\r\n    food_dict = {}\r\n    with shelve.open(\"foodypulse\", \"c\") as db:\r\n        try:\r\n            if 'food' in db:\r\n                food_dict = db['food']\r\n            else:\r\n                db['food'] = food_dict\r\n        except Exception as e:\r\n            logging.error(\"create_food: error opening db (%s)\" % e)\r\n\r\n    # storing the food keys in food_dict into a new list for displaying and deleting\r\n    food_list = []\r\n    for key in food_dict:\r\n        food = food_dict.get(key)\r\n        food_list.append(food)\r\n\r\n    return render_template('admin/foodManagement.html',\r\n                           food_list=food_list)\r\n\r\n\r\nMAX_SPECIFICATION_ID = 5  # for adding food\r\nMAX_TOPPING_ID = 8\r\n\r\n\r\n# ADMIN FOOD FORM clara\r\n@app.route('/admin/addFoodForm', methods=['GET', 'POST'])\r\ndef create_food():\r\n    create_food_form = CreateFoodForm(request.form)\r\n\r\n    # get specifications as a List, no WTForms\r\n    def get_specs() -> list:\r\n        specs = []\r\n\r\n        # do specifications exist in first place?\r\n        for i in range(MAX_SPECIFICATION_ID + 1):\r\n            if \"specification%d\" % i in request.form:\r\n                specs.append(request.form[\"specification%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: specs is %s\" % specs)\r\n        return specs\r\n\r\n        # get toppings as a List, no WTForms\r\n\r\n    def get_top() -> list:\r\n        top = []\r\n\r\n        # do toppings exist in first place?\r\n        for i in range(MAX_TOPPING_ID + 1):\r\n            if \"topping%d\" % i in request.form:\r\n                top.append(request.form[\"topping%d\" % i])\r\n            else:\r\n                break\r\n\r\n        logging.info(\"create_food: top is %s\" % top)\r\n        return top\r\n\r\n    # using the WTForms way to get the data\r\n    if request.method == 'POST' and create_food_form.validate():\r\n        food_dict = {}\r\n        with shelve.open(\"foodypulse\", \"c\") as db:\r\n            try:\r\n                if 'food' in db:\r\n                    food_dict = db['food']\r\n                else:\r\n                    db['food'] = food_dict\r\n            except Exception as e:\r\n                logging.error(\"create_food: error opening db (%s)\" % e)\r\n\r\n            # Create a new food object\r\n            food = Food(request.form[\"image\"], create_food_form.item_name.data,\r\n                        create_food_form.description.data,\r\n                        create_food_form.price.data, create_food_form.allergy.data)\r\n\r\n            food.specification = get_specs()  # set specifications as a List\r\n            food.topping = get_top()  # set topping as a List\r\n            food_dict[food.get_food_id()] = food  # set the food_id as key to store the food object\r\n            db['food'] = food_dict\r\n\r\n        # writeback\r\n        with shelve.open(\"foodypulse\", 'c') as db:\r\n            db['food'] = food_dict\r\n\r\n        return redirect(url_for('admin_home'))\r\n\r\n    return render_template('admin/addFoodForm.html', form=create_food_form,\r\n                           MAX_SPECIFICATION_ID=MAX_SPECIFICATION_ID,\r\n                           MAX_TOPPING_ID=MAX_TOPPING_ID, )\r\n\r\n\r\n@app.route('/deleteFood/<int:id>', methods=['POST'])\r\ndef delete_food(id):\r\n    food_dict = {}\r\n    with shelve.open(\"foodypulse\", 'c') as db:\r\n        food_dict = db['food']\r\n        food_dict.pop(id)\r\n        db['food'] = food_dict\r\n\r\n    return redirect(url_for('food_management'))\r\n\r\n\r\n@app.route('/updateFood/<int:id>/', methods=['GET', 'POST'])\r\n\r\n#save new specification and list\r\n\r\ndef update_food(id):\r\n    update_food_form = CreateFoodForm(request.form)\r\n\r\n    if request.method == 'POST' and update_food_form.validate():\r\n        food_dict = {}\r\n        with shelve.open(\"foodypulse\", 'w') as db:\r\n            food_dict = db['food']\r\n\r\n            food = food_dict.get(id)\r\n            food.set_name(update_food_form.item_name.data)\r\n            food.set_description(update_food_form.description.data)\r\n            food.set_price(update_food_form.price.data)\r\n            food.set_allergy(update_food_form.allergy.data)\r\n\r\n            db['food'] = food_dict\r\n\r\n        return redirect(url_for('food_management'))\r\n    else:\r\n        food_dict = {}\r\n        with shelve.open(\"foodypulse\", 'r') as db:\r\n            food_dict = db['food']\r\n\r\n        food = food_dict.get(id)\r\n        update_food_form.item_name.data = food.get_item_name()\r\n        update_food_form.description.data = food.get_description()\r\n        update_food_form.price.data = food.get_price()\r\n        update_food_form.allergy.data = food.get_allergy()\r\n\r\n        return render_template('updateFood.html', form=update_food_form)\r\n\r\n\r\n# <------------------------- YONG LIN ------------------------------>\r\n# YL: for transactions -- creating of dummy data\r\n@app.route(\"/admin/transaction/createExampleTransactions\")\r\ndef create_example_transactions():\r\n    # WARNING - Overrides ALL transactions in the db!\r\n    transaction_list = []\r\n\r\n    # creating a shelve file with dummy data\r\n    # 1: <account id> ; <user_id> ; <option> ; <price> ; <coupons> , <rating>\r\n    t1 = Transaction()\r\n    t1.account_name = 'Yong Lin'\r\n    t1.set_option('Delivery')\r\n    t1.set_price(50.30)\r\n    t1.set_used_coupons('SPAGETIT')\r\n    t1.set_ratings(2)\r\n    transaction_list.append(t1)\r\n\r\n    t2 = Transaction()  # t2\r\n    t2.account_name = 'Ching Chong'\r\n    t2.set_option('Dine-in')\r\n    t2.set_price(80.90)\r\n    t2.set_used_coupons('50PASTA')\r\n    t2.set_ratings(5)\r\n    transaction_list.append(t2)\r\n\r\n    t3 = Transaction()  # t3\r\n    t3.account_name = 'Hosea'\r\n    t3.set_option('Delivery')\r\n    t3.set_price(20.10)\r\n    t3.set_used_coupons('50PASTA')\r\n    t3.set_ratings(1)\r\n    transaction_list.append(t3)\r\n\r\n    t4 = Transaction()  # t4\r\n    t4.account_name = 'Clara'\r\n    t4.set_option('Delivery')\r\n    t4.set_price(58.30)\r\n    t4.set_used_coupons('SPAGETIT')\r\n    t4.set_ratings(2)\r\n    transaction_list.append(t4)\r\n\r\n    t5 = Transaction()  # t5\r\n    t5.account_name = 'Ruri'\r\n    t5.set_option('Dine-in')\r\n    t5.set_price(80.90)\r\n    t5.set_used_coupons('50PASTA')\r\n    t5.set_ratings(3)\r\n    transaction_list.append(t5)\r\n\r\n    t6 = Transaction()  # t6\r\n    t6.account_name = 'Ashlee'\r\n    t6.set_option('Delivery')\r\n    t6.set_price(100.10)\r\n    t6.set_used_coupons('50PASTA')\r\n    t6.set_ratings(2)\r\n    transaction_list.append(t6)\r\n\r\n    t7 = Transaction()\r\n    t7.account_name = 'Hello'\r\n    t7.set_option('Dine-in')\r\n    t7.set_price(10.90)\r\n    t7.set_used_coupons('50PASTA')\r\n    t7.set_ratings(4)\r\n    transaction_list.append(t7)\r\n\r\n    # writing to the database\r\n    with shelve.open(DB_NAME, \"c\") as db:\r\n        try:\r\n            db['shop_transactions'] = transaction_list\r\n        except Exception as e:\r\n            logging.error(\"create_example_transactions: error writing to db (%s)\" % e)\r\n\r\n    return redirect(url_for(\"admin_transaction\"))\r\n\r\n\r\n# YL: for transactions -- reading of data and displaying (R in CRUD)\r\n@app.route(\"/admin/transaction\")\r\ndef admin_transaction():\r\n    # read transactions from db\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        if 'shop_transactions' in db:\r\n            transaction_list = db['shop_transactions']\r\n            logging.info(\"admin_transaction: reading from db['shop_transactions']\"\r\n                         \", %d elems\" % len(db[\"shop_transactions\"]))\r\n        else:\r\n            logging.info(\"admin_transaction: nothing found in db, starting empty\")\r\n            transaction_list = []\r\n\r\n    def get_transaction_by_id(transaction_id):  # debug\r\n        for transaction in transaction_list:\r\n            if transaction_id == transaction.count_id:\r\n                return transaction\r\n\r\n    return render_template(\"admin/transaction.html\", count=len(transaction_list),\r\n                           transaction_list=transaction_list)\r\n\r\n\r\n# YL: for transactions -- soft delete (D in CRUD)\r\n# soft delete -> restaurant can soft delete transactions jic if the transaction is cancelled\r\n@app.route('/admin/transaction/delete/<transaction_id>')\r\ndef delete_transaction(transaction_id):\r\n    transaction_id = int(transaction_id)\r\n\r\n    transaction_list = []\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        for transaction in db['shop_transactions']:\r\n            transaction_list.append(transaction)\r\n\r\n    def get_transaction_by_id(t_id):  # debug\r\n        for t in transaction_list:\r\n            if t_id == t.count_id:\r\n                return t\r\n\r\n    logging.info(\"delete_transaction: deleted transaction with id %d\"\r\n                 % transaction_id)\r\n\r\n    # set instance attribute 'deleted' of Transaction.py = False\r\n    get_transaction_by_id(transaction_id).deleted = True\r\n\r\n    # writeback to shelve\r\n    with shelve.open(DB_NAME, 'c') as db:\r\n        db[\"shop_transactions\"] = transaction_list\r\n\r\n    return redirect(url_for('admin_transaction'))\r\n\r\n\r\n# certification -- xu yong lin\r\n# YL: for certification -- form (C in CRUD)\r\n# TODO: FILE UPLOAD, FILE SAVING, SHELVE UPDATE\r\n@app.route(\"/admin/uploadCertification\", methods=['GET', 'POST'])\r\ndef upload_cert():\r\n    certification_form = DocumentUploadForm(request.form)\r\n\r\n    if certification_form.validate_on_submit():\r\n        # file path to save files to:\r\n        assets_dir = os.path.join(os.path.dirname(app.instance_path), 'restaurantCertification')\r\n        # assests_dir ==> C:\\Users\\yongl\\appdpj\\src\\restaurantCertification\r\n        hygiene = certification_form.hygiene_doc.data\r\n\r\n        # saving\r\n        hygiene.save(os.path.join(assets_dir, 'hygiene', hygiene.filename))\r\n\r\n        logging.info('Document uploaded successfully.')\r\n        return redirect(url_for('admin_home'))\r\n\r\n    return render_template(\"admin/certification2.html\")\r\n\r\n\r\n# @app.route(\"/admin/certification\", methods=['GET', 'POST'])\r\n# def admin_certification():\r\n#     # TODO: FILE UPLOAD, FILE SAVING, SHELVE UPDATE\r\n#     # set upload directory path\r\n#     certification_form = RestaurantCertification()\r\n#     if certification_form.validate_on_submit():\r\n#         assets_dir = os.path.join(os.path.dirname('./static/restaurantCertification'))\r\n#\r\n#         hygiene = certification_form.hygiene_cert.data\r\n#         halal = certification_form.halal_cert.data\r\n#         vegetarian = certification_form.vegetarian_cert.data\r\n#         vegan = certification_form.vegan_cert.data\r\n#\r\n#         # document save\r\n#         # halal.save(os.path.join(app.config['UPLOAD_FOLDER'], halaldoc_name))\r\n#         hygiene.save(os.path.join(assets_dir, '<userid>', hygiene))\r\n#         halal.save(os.path.join(assets_dir, '<userid>', halal))\r\n#         vegetarian.save(os.path.join(assets_dir, '<userid>', vegetarian))\r\n#         vegan.save(os.path.join(assets_dir, '<userid>', vegan))\r\n#\r\n#         # halal.save(os.path.join('/application/static/restaurantCertification', halaldoc_name))\r\n#         # vegetarian.save(\r\n#         #     os.path.join('/application/static/restaurantCertification', vegetariandoc_name))\r\n#         # vegan.save(os.path.join('/application/static/restaurantCertification', vegandoc_name))\r\n#\r\n#         flash('Document uploaded successfully')\r\n#\r\n#         return redirect(url_for('admin_transaction'))\r\n#\r\n#     return render_template(\"admin/certification.html\",\r\n#                            certification_form=certification_form)\r\n\r\n\r\n# YL: for certification -- reading of data and displaying it to myRestaurant (C in CRUD)\r\n@app.route(\"/admin/certification\")\r\ndef read_cert():\r\n    # TODO: READ DATA FROM SHELVE\r\n    return render_template(\"admin/certification.html\")\r\n\r\n\r\n# YL: for certification -- Update certification [if it expires/needs to be updated] (U in CRUD)\r\n# TODO: REDIRECT BACK TO FORM IN 'C IN CRUD'\r\n# TODO: CHECK IF THE FILES ARE THE SAME AND UPDATE THE DETAILS\r\n\r\n# YL: for certification -- Delete (D in CRUD)\r\n# TODO: DELETE BUTTON (similar to delete User in SimpleWebApplication)\r\n# not soft delete!\r\n\r\n\r\n# <------------------------- RURI ------------------------------>\r\n@app.route('/admin/myRestaurant', methods=['GET', 'POST'])\r\ndef admin_myrestaurant():  # ruri\r\n    restaurant_details_form = RestaurantDetailsForm(request.form)\r\n    restaurants_dict = {}\r\n    if request.method == 'POST' and restaurant_details_form.validate():\r\n        db = shelve.open(DB_NAME, 'c')\r\n        try:\r\n            restaurants_dict = db['Restaurants']\r\n        except Exception as e:\r\n            logging.error(\"Error in retrieving Restaurants from \"\r\n                          \"restaurants.db (%s)\" % e)\r\n\r\n        restaurant = Restaurant(request.form[\"rest_logo\"],\r\n                                # request.form[\"alltasks\"],\r\n                                restaurant_details_form.rest_name.data,\r\n                                restaurant_details_form.rest_contact.data,\r\n                                restaurant_details_form.rest_hour_open.data,\r\n                                restaurant_details_form.rest_hour_close.data,\r\n                                restaurant_details_form.rest_address1.data,\r\n                                restaurant_details_form.rest_address2.data,\r\n                                restaurant_details_form.rest_postcode.data,\r\n                                restaurant_details_form.rest_desc.data,\r\n                                restaurant_details_form.rest_bank.data,\r\n                                restaurant_details_form.rest_del1.data,\r\n                                restaurant_details_form.rest_del2.data,\r\n                                restaurant_details_form.rest_del3.data,\r\n                                restaurant_details_form.rest_del4.data,\r\n                                restaurant_details_form.rest_del5.data)\r\n        restaurants_dict[restaurant.name] = restaurant\r\n        db['Restaurants'] = restaurants_dict\r\n\r\n        db.close()\r\n\r\n    return render_template(\"admin/restaurant.html\", form=restaurant_details_form)\r\n\r\n\r\n# #\r\n# @app.route('admin/myrestaurant', methods=['GET', 'POST'])\r\n# def create_customer():\r\n#     create_customer_form: CreateCustomerForm = CreateCustomerForm(request.form)\r\n#     if request.method == 'POST' and create_customer_form.validate():\r\n#         customers_dict = {}\r\n#         db = shelve.open('customer.db', 'c')\r\n#\r\n#         try:\r\n#             customers_dict = db['Customers']\r\n#         except:\r\n#             print(\"Error in retrieving Customers from customer.db.\")\r\n#\r\n#         customer = Customer.Customer(create_customer_form.first_name.data, create_customer_form.last_name.data,\r\n#                                      create_customer_form.gender.data, create_customer_form.membership.data,\r\n#                                      create_customer_form.remarks.data, create_customer_form.email.data,\r\n#                                      create_customer_form.date_joined.data,\r\n#                                      create_customer_form.address.data, )\r\n#         customers_dict[customer.get_customer_id()] = customer\r\n#         db['Customers'] = customers_dict\r\n#\r\n#         db.close()\r\n#\r\n#         return redirect(url_for('home'))\r\n#     return render_template('includes/createCustomer.html', form=create_customer_form)\r\n\r\n\r\n@app.route(\"/admin/dashboard\")\r\ndef dashboard():  # ruri\r\n    return render_template(\"admin/dashboard.html\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/application/Controllers/admin.py b/application/Controllers/admin.py
--- a/application/Controllers/admin.py	
+++ b/application/Controllers/admin.py	
@@ -459,17 +459,20 @@
 def upload_cert():
     certification_form = DocumentUploadForm(request.form)
 
-    if certification_form.validate_on_submit():
-        # file path to save files to:
-        assets_dir = os.path.join(os.path.dirname(app.instance_path), 'restaurantCertification')
-        # assests_dir ==> C:\Users\yongl\appdpj\src\restaurantCertification
-        hygiene = certification_form.hygiene_doc.data
+    # if certification_form.validate_on_submit():
+        # # file path to save files to:
+        # assets_dir = os.path.join(os.path.dirname(app.instance_path), 'restaurantCertification')
+        # # assests_dir ==> C:\Users\yongl\appdpj\src\restaurantCertification
+        # hygiene = certification_form.hygiene_doc.data
+        #
+        # # saving
+        # hygiene.save(os.path.join(assets_dir, 'hygiene', hygiene.filename))
+        #
+        # logging.info('Document uploaded successfully.')
+        # return redirect(url_for('admin_home'))
 
-        # saving
-        hygiene.save(os.path.join(assets_dir, 'hygiene', hygiene.filename))
-
-        logging.info('Document uploaded successfully.')
-        return redirect(url_for('admin_home'))
+    # else:
+    #     print('not successful')
 
     return render_template("admin/certification2.html")
 
